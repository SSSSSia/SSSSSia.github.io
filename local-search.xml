<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据在内存中的存储</title>
    <link href="/2024/02/15/%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/"/>
    <url>/2024/02/15/%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="数据在内存中的存储"><a href="#数据在内存中的存储" class="headerlink" title="数据在内存中的存储"></a>数据在内存中的存储</h1><br><h2 id="数据类型的介绍"><a href="#数据类型的介绍" class="headerlink" title="数据类型的介绍"></a>数据类型的介绍</h2><p>基本内置类型：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">char        //字符数据类型   1<br>short//短整型     2<br>int//整型     4<br>long//长整型 4/8<br>long long//更长的整型8<br>float//单精度浮点数   4<br>double//双精度浮点数   8<br></code></pre></td></tr></table></figure><p><strong>类型的意义</strong></p><p>1.使用这个类型开辟内存空间的大小（大小决定了适用范围）</p><p>2.如何看待内存空间的视角</p><br><h2 id="数据类型的基本归类"><a href="#数据类型的基本归类" class="headerlink" title="数据类型的基本归类"></a>数据类型的基本归类</h2><p><strong>整型家族</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">char//字符的本质是ASCII码值，是整型  <br><span class="hljs-code">signed char//char的标准是未定义的，有无符号取决于编译器</span><br><span class="hljs-code">unsigned char</span><br><span class="hljs-code">short</span><br><span class="hljs-code">signed short [int]</span><br><span class="hljs-code">unsigned short [int]</span><br><span class="hljs-code">int </span><br><span class="hljs-code">signed int</span><br><span class="hljs-code">unsigned int</span><br><span class="hljs-code">long </span><br><span class="hljs-code">signed long [int]</span><br><span class="hljs-code">unsigned long [int]</span><br><span class="hljs-code">long long</span><br><span class="hljs-code">signed long long [int]</span><br><span class="hljs-code">unsigned long long [int]</span><br></code></pre></td></tr></table></figure><p><strong>浮点数家族</strong></p><blockquote><p>只要是表示小数就可以使用浮点型</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">float</span><br><span class="hljs-built_in">double</span><br></code></pre></td></tr></table></figure><p><strong>构造类型：（自定义类型 - 可以自己创建出新的类型）</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&gt;数组类型<br>&gt;构造体类型 struct<br>&gt;枚举类型 enum<br>&gt;联合类型 union<br></code></pre></td></tr></table></figure><p><strong>指针类型</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">int \<span class="hljs-emphasis">*pi;</span><br><span class="hljs-emphasis">char \*</span>pc;<br>float \<span class="hljs-emphasis">*pf;</span><br><span class="hljs-emphasis">void \*</span>pv;<br></code></pre></td></tr></table></figure><p><strong>空类型</strong></p><blockquote><p>void表示空类型（无类型）<br>通常应用于函数的返回类型、函数的参数、指针类型</p></blockquote><br><h2 id="整型在内存中的存储"><a href="#整型在内存中的存储" class="headerlink" title="整型在内存中的存储"></a>整型在内存中的存储</h2><br><p><strong>整数在二进制的表示有三种形式：</strong></p><p>1.正的整数，原码、反码、补码相同</p><p>2.负的整数：</p><blockquote><p>原码：直接通过正数的形式写出的二进制序列就是原码，但序列最前方符号位为1</p><p>反码：原码的符号位不变，其他位按位取反</p><p>补码：反码+1就是补码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//数值有不同的表示形式</span><br><span class="hljs-comment">//2进制</span><br><span class="hljs-comment">//8进制</span><br><span class="hljs-comment">//10进制</span><br><span class="hljs-comment">//16进制</span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">20</span>;<br>    <span class="hljs-comment">//20</span><br>    <span class="hljs-comment">//00000000 00000000 00000000 00010100</span><br>    <span class="hljs-comment">//0X00 00 00 14</span><br>    <span class="hljs-comment">//00000000 00000000 00000000 00010100</span><br>    <span class="hljs-comment">//00000000 00000000 00000000 00010100</span><br>  <br>    <span class="hljs-type">int</span> b = <span class="hljs-number">-10</span>;<br>  <span class="hljs-comment">//-10</span><br>    <span class="hljs-comment">//10000000 00000000 00000000 00001010--原码</span><br>    <span class="hljs-comment">//0x80 00 00 0a</span><br>    <span class="hljs-comment">//11111111 11111111 11111111 11110101--反码</span><br>    <span class="hljs-comment">//0xff ff ff f5</span><br>    <span class="hljs-comment">//11111111 11111111 11111111 11110110--补码</span><br>    <span class="hljs-comment">//0xff ff ff f6</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在计算机系统中，数值一律用<strong>补码</strong>来表示和存储。原因在于，使用补码，可以将符号位和数值位统一处理；</p><p>同时，加法和减法也可以统一处理<strong>（CPU只有加法器）</strong>，此外，补码和原码相互转换，其运算过程是相同的，不需要额外的硬件电路。</p></blockquote><br><h2 id="大小端"><a href="#大小端" class="headerlink" title="大小端"></a>大小端</h2><p><strong>大端【字节序】存储：</strong>把一个数据的高位字节序的内容，存放在低地址处，把低位字节序的内容，放在高地址处，就是大端字节序存储。</p><p><strong>小端【字节序】存储：</strong>把一个数据的高位字节序的内容放在高地址处，把低位字节序的内容放在低地址处，就是小端字节序存储。</p><blockquote><p>左低右高，正序大端，逆序小端</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">0x11223344<br><br>大端存储       小端存储<br>11 22 33 44                                      44 33 22 11 <br>低地址 高地址    <br></code></pre></td></tr></table></figure><p>eg.设计一个程序来判断当前机器是大端还是小端</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">check_sys</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">char</span>*)&amp;a;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-comment">//0x00 00 00 01</span><br><span class="hljs-comment">//大端存储       小端存储</span><br><span class="hljs-comment">//00 00 00 01                                    01 00 00 00 </span><br><span class="hljs-comment">//低地址 高地址 </span><br>    <span class="hljs-type">char</span> *pa = (<span class="hljs-type">char</span>*)&amp;a;<br>    <span class="hljs-comment">//int ret = check_sys();</span><br>    <span class="hljs-keyword">if</span>(*pa==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;小端&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;大端&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>数据存储</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言中的整型提升</title>
    <link href="/2024/02/04/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%95%B4%E5%9E%8B%E6%8F%90%E5%8D%87/"/>
    <url>/2024/02/04/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%95%B4%E5%9E%8B%E6%8F%90%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://blog.csdn.net/m0_52089596/article/details/114397911">https://blog.csdn.net/m0_52089596/article/details/114397911</a></p></blockquote><hr><p><strong>整型提升:</strong>  </p><blockquote><p>在表达式计算时，各种整形(char short int)首先要提升为int类型。表达式的整型运算要在CPU的相应运算器件内执行，CPU内的整型运算器的操作数的字节长度一般是int 类型的字节长度，即四个字节。如果int类型不足以表示的话，就需要提升为unsigned int类型。(相对应的大于等于int类型的数据，存在算术转换)</p></blockquote><p><strong>整型提升的规则:</strong></p><blockquote><p>整型提升分为有符号和无符号两种，<strong>有符号的：</strong>整型提升时是按照变量的补码被截断时的最高位是什么进行补位的，如果截断后最高位即最左面的一位数为 1 则在最高位前补 1 ，如果最高位是 0 则在前面补 0 ，补够32位即int类型即可。 <strong>无符号的：</strong> 直接在被截断的前面补 0 即可。</p></blockquote><p><strong>整型提升的意义:</strong></p><blockquote><p>表达式的整形运算都要在CPU的相应运算器件内执行，CPU内整型运算器(ALU)的操作数的字节长度一般就是int的字节长度，同时也是CPU的通用寄存器的长度。</p><p>因此，即使是两个char类型的相加，在CPU执行时实际上也要先转换为CPU内整形操作数的标准长度（int）。</p><p>通用CPU时难以直接实现两个8比特字节直接相加运算。所以表达式中各种长度可能小于int长度的整型值，都必须先转换成int或unsigned int，然后才能送入CPU去执行运算。</p></blockquote><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> a = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">char</span> b = <span class="hljs-number">127</span>;<br>    <span class="hljs-type">char</span> c = a + b;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%95%B4%E5%9E%8B%E6%8F%90%E5%8D%87/img1.png" alt="运行结果"></p><p>3的补码为 : 00000000 00000000 00000000 00000011。</p><p>a的类型为char，只能存储一个字节即8个比特位，所以需要进行截断只保留最后的8个比特位，此时a中存储的数据为：00000011。</p><p>127的补码为 : 00000000 00000000 00000000 01111111。</p><p>同理，b的类型为char，此时b中存储的数据为: 01111111。</p><p>在执行 a+b 时，先对a 和 b进行整型提升(有符号)，提升时补最高位数字</p><p>提升后两者的补码为:</p><p>00000000 00000000 00000000 00000011</p><p>00000000 00000000 00000000 01111111</p><p>二者补码相加的结果为:</p><p>00000000 00000000 00000000 10000010</p><p>因为 c 的类型也为char，只能存放8个比特位，截断后 c 中存储的数据为: 10000010。</p><p>在打印时是以 %d 的形式即 int 类型，需要32位比特位，因此需要对 c 进行整型提升</p><p>因为c 的最高位是 1 所以在最高位前面补 1 即可，补够32位，提升后补码为：</p><p>11111111 11111111 11111111 10000010</p><p>将补码转化为原码的形式打印出来，转化后的原码为 ： 10000000 0 0000000 00000000 01111110 原码首位是 0 时为正数，为 1 时为负数，此原码对应的整数就为 -126</p><hr><p><strong>例:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> a= <span class="hljs-number">-129</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%95%B4%E5%9E%8B%E6%8F%90%E5%8D%87/img2.png" alt="运行结果"></p><p>整数 -129 的补码为： 11111111 11111111 11111111 01111111</p><p>被截断后为 01111111</p><p>打印%d的形式时在进行整型提升，截断后最高位为 0 ，所以在最高位前面补 0 提升后的补码为： </p><p>00000000 00000000 00000000 01111111</p><p>因为补码的最前面的一位数为0 ，所以是正数，正数的原码 反码 补码相同，即将补码转化的原码</p><p>为： 00000000 00000000 00000000 01111111 此原码对应的值就是 127</p><hr><p><strong>例:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> a = <span class="hljs-number">0xb6</span>;      <span class="hljs-comment">// 1011 0110</span><br>  <span class="hljs-type">short</span> b = <span class="hljs-number">0xb600</span>;   <span class="hljs-comment">// 1011 0110 0000 0000</span><br>  <span class="hljs-type">int</span> c = <span class="hljs-number">0xb6000000</span>; <span class="hljs-comment">// 1011 0110 0000 0000 0000 0000 0000 0000</span><br>  <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0xb6</span>)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>  <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0xb600</span>)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b&quot;</span>);<br>  <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0xb6000000</span>)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c&quot;</span>);<br>    <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%95%B4%E5%9E%8B%E6%8F%90%E5%8D%87/img3.png" alt="运行结果"></p><hr><p><strong>例</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> c = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%zu\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(c)); <span class="hljs-comment">//1</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%zu\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(+c)); <span class="hljs-comment">//4</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%zu\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(-c)); <span class="hljs-comment">//4</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言实现扫雷</title>
    <link href="/2024/02/02/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/"/>
    <url>/2024/02/02/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="简易版扫雷"><a href="#简易版扫雷" class="headerlink" title="简易版扫雷"></a>简易版扫雷</h2><br><blockquote><p><em>效果如下:</em></p></blockquote><br><img src="https://gitee.com/sssssia/sssssia/raw/master/img/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/result1.png" alt="效果图"  /><hr><img src="https://gitee.com/sssssia/sssssia/raw/master/img/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/result2.png" alt="效果图"  /><hr><br><blockquote><p><em>代码部分</em>:</p></blockquote><br><p><strong>game.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ROW 9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COL 9</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ROWS ROW + 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COLS COL + 2</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EASY_COUNT 10</span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> rows, <span class="hljs-type">int</span> cols, <span class="hljs-type">char</span> <span class="hljs-built_in">set</span>)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">DisplayBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">SetMine</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">FindMine</span><span class="hljs-params">(<span class="hljs-type">char</span> mine[ROWS][COLS], <span class="hljs-type">char</span> show[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><br><br></code></pre></td></tr></table></figure><hr><p><strong>game.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;game.h&quot;</span></span><br><br><br><span class="hljs-comment">// 初始化棋盘</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> rows, <span class="hljs-type">int</span> cols, <span class="hljs-type">char</span> <span class="hljs-built_in">set</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; rows; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; cols; j++)<br>        &#123;<br>            board[i][j] = <span class="hljs-built_in">set</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 打印棋盘</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DisplayBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;----------------------扫雷游戏-------------------------\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt;= col; j++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, j);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= row; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i);<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt;= col; j++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, board[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;----------------------扫雷游戏-------------------------\n&quot;</span>);<br>&#125;<br><br><br><br><span class="hljs-comment">// 随机埋雷</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SetMine</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    <span class="hljs-type">int</span> count = EASY_COUNT;<br>    <span class="hljs-keyword">while</span> (count)<br>    &#123;<br>        <span class="hljs-type">int</span> x = rand() % row + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> y = rand() % col + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (board[x][y] == <span class="hljs-string">&#x27;0&#x27;</span>)<br>        &#123;<br>            board[x][y] = <span class="hljs-string">&#x27;1&#x27;</span>;<br>            count--;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-comment">//计算周边雷的个数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_mine_count</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (board[x - <span class="hljs-number">1</span>][y] + board[x][y + <span class="hljs-number">1</span>] + board[x + <span class="hljs-number">1</span>][y] + board[x][y - <span class="hljs-number">1</span>] + board[x - <span class="hljs-number">1</span>][y + <span class="hljs-number">1</span>] + board[x - <span class="hljs-number">1</span>][y - <span class="hljs-number">1</span>] + board[x + <span class="hljs-number">1</span>][y + <span class="hljs-number">1</span>] + board[x + <span class="hljs-number">1</span>][y - <span class="hljs-number">1</span>] - (<span class="hljs-number">8</span> * <span class="hljs-string">&#x27;0&#x27;</span>));<br>&#125;<br><br><br><span class="hljs-comment">//递归展开无雷区域</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ExtendShow</span><span class="hljs-params">(<span class="hljs-type">char</span> mine[ROWS][COLS],<span class="hljs-type">char</span> show[ROWS][COLS],<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span> || y == <span class="hljs-number">0</span> || x == <span class="hljs-number">10</span> || y == <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> count = get_mine_count(mine, x, y);<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">-1</span>, j = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (show[x][y] != <span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>            show[x][y] = <span class="hljs-string">&#x27; &#x27;</span>; <br>            <br><br>            <span class="hljs-comment">//for (i = -1; i &lt;= 1; i++)&#123;</span><br>            <span class="hljs-comment">//    for (j = -1; j &lt;= 1; j++)&#123;</span><br>            <span class="hljs-comment">//        ExtendShow(mine, show, x+i, y+j);</span><br>            <span class="hljs-comment">//    &#125;</span><br>            <span class="hljs-comment">//&#125;</span><br><br><br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">-1</span>; i &lt;= <span class="hljs-number">1</span>; i++) &#123;<br>                ExtendShow(mine, show, x + i, y);<br>            &#125;<br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">-1</span>; j &lt;= <span class="hljs-number">1</span>; j++) &#123;<br>                ExtendShow(mine, show, x, y+j);<br>            &#125;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        show[x][y] = count + <span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br><br>&#125;<br><br><br><br><br><span class="hljs-comment">//判断输赢 - 计算发现的非雷区域的个数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">IsWin</span><span class="hljs-params">(<span class="hljs-type">char</span> show[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= row; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt;= col; j++) &#123;<br>            <span class="hljs-keyword">if</span> (show[i][j] != <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; show[i][j] != <span class="hljs-string">&#x27;?&#x27;</span>) &#123;<br>                count++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><br><span class="hljs-comment">//优化显示雷区(最后)</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">OptimizeMine</span><span class="hljs-params">(<span class="hljs-type">char</span> mine[ROWS][COLS],<span class="hljs-type">int</span> row,<span class="hljs-type">int</span> col)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= row; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt;= col; j++) &#123;<br>            <span class="hljs-keyword">if</span> (mine[i][j] == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>                mine[i][j] = <span class="hljs-string">&#x27; &#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                mine[i][j] = <span class="hljs-string">&#x27;*&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 排查雷</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">FindMine</span><span class="hljs-params">(<span class="hljs-type">char</span> mine[ROWS][COLS], <span class="hljs-type">char</span> show[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> win = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 找到的非雷的个数</span><br><br>    <span class="hljs-keyword">while</span> (win &lt; row * col - EASY_COUNT)<br>    &#123;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入(-1 -1)标记雷 | &quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入要排查的坐标(x y):&gt;\n&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);<br><br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入要标记的坐标(x y):&gt;&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);<br>    <br>            <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="hljs-number">1</span> &amp;&amp; y &lt;= col) &#123;<br>                <span class="hljs-keyword">if</span> (show[x][y] != <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; show[x][y]!=<span class="hljs-string">&#x27;?&#x27;</span>)<br>                &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;该坐标已被排查,无法进行标记\n&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    show[x][y] = <span class="hljs-string">&#x27;?&#x27;</span>;<br>                &#125;<br>            &#125;<br>            DisplayBoard(show, ROW, COL);<br>            <br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="hljs-number">1</span> &amp;&amp; y &lt;= col)&#123;<br>            <span class="hljs-keyword">if</span> (show[x][y] != <span class="hljs-string">&#x27;*&#x27;</span>&amp;&amp;show[x][y]!=<span class="hljs-string">&#x27;?&#x27;</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;该坐标已被排查,不能重复排查\n&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (mine[x][y] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                &#123;<br>                    win = <span class="hljs-number">0</span>;<br>                    OptimizeMine(mine, ROW, COL);<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;游戏失败\n&quot;</span>);<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                    DisplayBoard(mine, ROW, COL);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-type">int</span> count = get_mine_count(mine, x, y);<br>                    <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;<br>                        ExtendShow(mine, show, x, y);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// 转换成数字字符</span><br>                        show[x][y] = count + <span class="hljs-string">&#x27;0&#x27;</span>;<br>          <br>                    &#125;<br>                    DisplayBoard(show, ROW, COL);<br><br>                &#125;<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;非法坐标,请重新输入\n&quot;</span>);<br><br>            <span class="hljs-comment">//清空缓存区</span><br>            <span class="hljs-keyword">while</span> (getchar() != <span class="hljs-string">&#x27;\n&#x27;</span>) &#123;<br>                getchar();<br>            &#125;<br>        &#125;<br>        win = IsWin(show, row, col);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (win == row * col - EASY_COUNT)<br>    &#123;<br>        win = <span class="hljs-number">0</span>;<br>        OptimizeMine(mine, ROW, COL);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;恭喜你,成功了\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        DisplayBoard(mine, ROW, COL);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p><strong>test.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;game.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">menu</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*****                    *****\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*****       1.play       *****\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*****       0.exit       *****\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*****                    *****\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">game</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> mine[ROWS][COLS] = &#123; <span class="hljs-number">0</span> &#125;; <span class="hljs-comment">// 存放雷的信息</span><br><span class="hljs-type">char</span> show[ROWS][COLS] = &#123; <span class="hljs-number">0</span> &#125;; <span class="hljs-comment">// 存放排查出的雷的信息</span><br><br><span class="hljs-comment">// mine 数组初始化全为&#x27;0&#x27;</span><br>InitBoard(mine, ROWS, COLS, <span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-comment">// show 数组初始化全为&#x27;*&#x27;</span><br>InitBoard(show, ROWS, COLS, <span class="hljs-string">&#x27;*&#x27;</span>);<br><br><span class="hljs-comment">// 设置雷</span><br>SetMine(mine, ROW, COL);<br>DisplayBoard(show, ROW, COL);<br><br><span class="hljs-comment">// 排查雷</span><br>FindMine(mine, show, ROW, COL);<br><span class="hljs-comment">//DisplayBoard(show, ROW, COL);</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">// 设置随机数的生成起点</span><br>srand((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)time(<span class="hljs-literal">NULL</span>));<br><span class="hljs-type">int</span> input = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">do</span><br>&#123;<br>menu();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请选择:&gt;&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;input);<br><span class="hljs-keyword">switch</span> (input)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>game();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;退出游戏\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;非法输入\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">while</span> (input);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Welcome To 533dad&#39;s Blog</title>
    <link href="/2024/01/30/Welcome-To-533dad-s-Blog/"/>
    <url>/2024/01/30/Welcome-To-533dad-s-Blog/</url>
    
    <content type="html"><![CDATA[<p><strong>你好……</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Welcome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言实现三子棋</title>
    <link href="/2024/01/30/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E4%B8%89%E5%AD%90%E6%A3%8B/"/>
    <url>/2024/01/30/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E4%B8%89%E5%AD%90%E6%A3%8B/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="C语言实现简单人机三子棋"><a href="#C语言实现简单人机三子棋" class="headerlink" title="C语言实现简单人机三子棋"></a>C语言实现简单人机三子棋</h2><blockquote><p><em>效果如下</em>：</p></blockquote><p><img src="https://gitee.com/sssssia/sssssia/raw/master/img/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E4%B8%89%E5%AD%90%E6%A3%8B/img1.png" alt="效果图"></p><hr><blockquote><p><em>代码部分:</em></p></blockquote><p><strong>game.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ROW 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COL 3</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-comment">// 初始化棋盘</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><br><span class="hljs-comment">// 打印棋盘</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DisplayBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><br><span class="hljs-comment">// 玩家下棋</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PlayerMove</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><br><span class="hljs-comment">// 电脑下棋</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ComputerMove</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><br><span class="hljs-comment">// 玩家赢 - &#x27;*&#x27;</span><br><span class="hljs-comment">// 电脑赢 - &#x27;#&#x27;</span><br><span class="hljs-comment">// 平局 - &#x27;Q&#x27;</span><br><span class="hljs-comment">// 继续 - &#x27; C&#x27;</span><br><span class="hljs-type">char</span> <span class="hljs-title function_">IsWin</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><br></code></pre></td></tr></table></figure><hr><p><strong>game.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;game.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; col; j++)<br>        &#123;<br>            board[i][j] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// // 第一个版本</span><br><span class="hljs-comment">// void DisplayBoard(char board[ROW][COL], int row, int col)</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//   int i = 0;</span><br><br><span class="hljs-comment">//   for (i = 0; i &lt; row; i++)</span><br><span class="hljs-comment">//   &#123;</span><br><span class="hljs-comment">//     // 打印数据</span><br><span class="hljs-comment">//     printf(&quot; %c | %c | %c \n&quot;, board[i][0], board[i][1], board[i][2]);</span><br><br><span class="hljs-comment">//     // 打印分割信息</span><br><span class="hljs-comment">//     if (i &lt; row - 1)</span><br><span class="hljs-comment">//     &#123;</span><br><span class="hljs-comment">//       printf(&quot;---|---|---\n&quot;);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">DisplayBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<br>    &#123;<br>        <span class="hljs-comment">// 打印数据</span><br>        <span class="hljs-comment">// printf(&quot; %c | %c | %c \n&quot;, board[i][0], board[i][1], board[i][2]);</span><br>        <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; col; j++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, board[i][j]);<br>            <span class="hljs-keyword">if</span> (j &lt; col - <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;|&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>        <span class="hljs-comment">// 打印分割信息</span><br>        <span class="hljs-keyword">if</span> (i &lt; row - <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; col; j++)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---&quot;</span>);<br>                <span class="hljs-keyword">if</span> (j &lt; col - <span class="hljs-number">1</span>)<br>                &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;|&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 玩家下棋</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PlayerMove</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;玩家下棋:&gt;\n&quot;</span>);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入坐标[x(1~3) y(1~3)]:&gt;\n&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);<br><br>        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="hljs-number">1</span> &amp;&amp; y &lt;= col)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (board[x - <span class="hljs-number">1</span>][y - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27; &#x27;</span>)<br>            &#123;<br>                board[x - <span class="hljs-number">1</span>][y - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;*&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;坐标被占用，不能下棋，请选择其他位置\n&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;坐标非法，请重新输入\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 电脑下棋</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ComputerMove</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    Sleep(<span class="hljs-number">500</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;电脑下棋:&gt;\n&quot;</span>);<br><br>    <span class="hljs-type">int</span> x, y;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        x = rand() % row; <span class="hljs-comment">// 0~2</span><br>        y = rand() % col; <span class="hljs-comment">// 0~2</span><br><br>        <span class="hljs-keyword">if</span> (board[x][y] == <span class="hljs-string">&#x27; &#x27;</span>)<br>        &#123;<br>            board[x][y] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">IsFull</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; col; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (board[i][j] == <span class="hljs-string">&#x27; &#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断输赢</span><br><span class="hljs-type">char</span> <span class="hljs-title function_">IsWin</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    <span class="hljs-comment">// 行</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (board[i][<span class="hljs-number">0</span>] == board[i][<span class="hljs-number">1</span>] &amp;&amp; board[i][<span class="hljs-number">1</span>] == board[i][<span class="hljs-number">2</span>] &amp;&amp; board[i][<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27; &#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> board[i][<span class="hljs-number">0</span>];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 列</span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; col; j++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][j] == board[<span class="hljs-number">1</span>][j] &amp;&amp; board[<span class="hljs-number">1</span>][j] == board[<span class="hljs-number">2</span>][j] &amp;&amp; board[<span class="hljs-number">0</span>][j] != <span class="hljs-string">&#x27; &#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> board[<span class="hljs-number">0</span>][j];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 对角线</span><br>    <span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] &amp;&amp; board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27; &#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] == board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == board[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] &amp;&amp; board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] != <span class="hljs-string">&#x27; &#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 平局</span><br>    <span class="hljs-keyword">if</span> (IsFull(board, ROW, COL))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Q&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 游戏继续</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;C&#x27;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p><strong>test.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;game.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">menu</span><span class="hljs-params">()</span><br>&#123;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;***********************************\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*****   1.play       0.exit   *****\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;***********************************\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">game</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> board[ROW][COL];<br>    <span class="hljs-comment">// 初始化棋盘</span><br>    InitBoard(board, ROW, COL);<br>    <span class="hljs-comment">// 打印棋盘</span><br>    DisplayBoard(board, ROW, COL);<br><br>    <span class="hljs-comment">// 下棋</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        PlayerMove(board, ROW, COL);<br>        DisplayBoard(board, ROW, COL);<br>        <span class="hljs-comment">// 判断输赢</span><br>        ret = IsWin(board, ROW, COL);<br>        <span class="hljs-keyword">if</span> (ret != <span class="hljs-string">&#x27;C&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        ComputerMove(board, ROW, COL);<br>        DisplayBoard(board, ROW, COL);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------\n&quot;</span>);<br>        <span class="hljs-comment">// 判断输赢</span><br>        ret = IsWin(board, ROW, COL);<br>        <span class="hljs-keyword">if</span> (ret != <span class="hljs-string">&#x27;C&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ret == <span class="hljs-string">&#x27;*&#x27;</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;玩家获胜\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == <span class="hljs-string">&#x27;#&#x27;</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;电脑获胜\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;平局\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    srand((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)time(<span class="hljs-literal">NULL</span>));<br>    <span class="hljs-type">int</span> input;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        menu();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请选择:&gt;&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;input);<br><br>        <span class="hljs-keyword">switch</span> (input)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;三子棋\n&quot;</span>);<br>            game();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;退出游戏\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;选择错误!\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (input);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个性化hexo主题</title>
    <link href="/2024/01/14/hexo-gitee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/01/14/hexo-gitee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p><a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97">Hexo Fluid 用户手册</a></p><h2 id="一些重要的配置"><a href="#一些重要的配置" class="headerlink" title="一些重要的配置"></a>一些重要的配置</h2><h3 id="初始化后的必要步骤"><a href="#初始化后的必要步骤" class="headerlink" title="初始化后的必要步骤"></a>初始化后的必要步骤</h3><p>首先，安装Fluid后，需要在根目录下新建一个<code>_config.fluid.yml</code>文件，并将<code>themes/fluid/_config.yml</code>中的所有内容复制过去。 然后，在<code>_config.yml</code>文件中指定主题和语言：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">theme: fluid  <span class="hljs-comment"># 指定主题</span><br>language: zh<span class="hljs-literal">-CN</span>  <span class="hljs-comment"># 指定语言</span><br></code></pre></td></tr></table></figure><p>最后，可以选择设置主题的自动更新，在根目录下输入以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm update <span class="hljs-literal">--save</span> hexo<span class="hljs-literal">-theme-fluid</span><br></code></pre></td></tr></table></figure><h3 id="创建关于页"><a href="#创建关于页" class="headerlink" title="创建关于页"></a>创建关于页</h3><p>关于页可以展示你的基本信息、兴趣、联系方式等，首次使用时需要先进行创建，在根目录输入以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">关于我</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span>  <span class="hljs-comment"># 必须存在且不能修改</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h3 id="覆盖配置"><a href="#覆盖配置" class="headerlink" title="覆盖配置"></a>覆盖配置</h3><p>当主题更新时可能导致原有配置丢失，因此在初始化后我们建立了<code>_config.fluid.yml</code>，<strong>之后所有的配置都只需要在根目录下的_config.fluid.yml文件中修改</strong>，而<code>themes/fluid/_config.yml</code>中的修改则无效、被覆盖。 注意：以下的所有配置也都是在<code>_config.fluid.yml</code>中修改！</p><h3 id="显示网站数据统计"><a href="#显示网站数据统计" class="headerlink" title="显示网站数据统计"></a>显示网站数据统计</h3><p>推荐采用leancloud实现显示网站的访客人数和总访问量，配置如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">footer:<br>  statistics:<br>    enable: false<br>    source: <span class="hljs-string">&quot;leancloud&quot;</span>  <span class="hljs-comment"># 在此处输入leancloud</span><br>    pv_format: <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span>  <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>    uv_format: <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br></code></pre></td></tr></table></figure><p>想要使用leancloud的功能，需要注册账号、新建应用并获取<code>App ID</code>和<code>App Key</code>，具体操作可以查看<a href="https://link.zhihu.com/?target=https://blog.csdn.net/lijing742180/article/details/87928554">这篇博文</a>。之后将获取的信息做如下配置：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">leancloud:<br>    app_id: 你获取的App ID<br>    app_key: 你获取的App Key<br></code></pre></td></tr></table></figure><p>这样就可以实现网站数据统计，需要注意的是在<strong>本地测试时可能会出现统计数据异常</strong>，这属于<strong>正常现象</strong>。</p><h3 id="开启博客评论功能"><a href="#开启博客评论功能" class="headerlink" title="开启博客评论功能"></a>开启博客评论功能</h3><p>推荐使用基于leancloud的Valine，首先需要做如下配置：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugin</span><br>comments:<br>    enable: true<br>    <span class="hljs-built_in">type</span>: valine  <span class="hljs-comment"># 在此处输入valine</span><br></code></pre></td></tr></table></figure><p>之后，在valine选项中做如下配置：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># Valine</span><br>valine:<br>  appId: 你获取的App ID<br>  appKey: 你获取的App Key<br></code></pre></td></tr></table></figure><p>访问<a href="https://link.zhihu.com/?target=https://valine.js.org/">Valine官网</a>，可以自定义评论系统的细节。</p><h2 id="撰写博客并发布"><a href="#撰写博客并发布" class="headerlink" title="撰写博客并发布"></a>撰写博客并发布</h2><h3 id="撰写博客"><a href="#撰写博客" class="headerlink" title="撰写博客"></a>撰写博客</h3><p>经过前面的六步，我们终于完成了一个博客系统的搭建，接下来我们就可以撰写自己的博文了。Hexo采用Markdown语法来编辑博文，这里推荐采用<a href="https://link.zhihu.com/?target=https://www.csdn.net/">csdn</a>的发布文章功能，先在csdn上写博文，之后导出为.md格式，就可以生成自己的博文。</p><h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>根据<a href="https://link.zhihu.com/?target=https://hexo.io/docs/writing.html">官方文档</a>，Hexo共有三种<code>layout</code>（排版形式）。在站点根目录下采用以下命令可以生成一个新的<code>layout</code>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo new [<span class="hljs-type">layout</span>] &lt;title&gt;<br></code></pre></td></tr></table></figure><p><code>layout</code>的缺省值为<code>post</code>，会生成一篇新的博文；若选择<code>page</code>，则会生成一个新的页面（就像之前的关于页）；若选择<code>draft</code>，则会生成一个草稿，你可以在这里自主编辑并选择合适的时机publish到<code>source/_posts</code>文件夹中。基于csdn的协助，我们可以根据以下步骤快速的完成一篇博文并上传：</p><p>(1) 采用上述命令生成一篇新的<code>post</code>，执行后会在<code>source/_posts</code>中生成一个<code>&lt;title&gt;.md</code>的文件，这部分内容如下（又称为<code>Front-matter</code>）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&lt;title&gt;</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">&lt;present</span> <span class="hljs-string">time&gt;</span><br><span class="hljs-attr">tags:</span> <span class="hljs-string">&lt;preset</span> <span class="hljs-string">tags&gt;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>(2) 将csdn中导出的md文字部分拷贝在上述内容的最后； (3) 执行以下命令，在本地（<code>http://localhost:4000</code>）查看效果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo c   <span class="hljs-comment"># 即hexo clean，清除缓存</span><br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>(4) 本地查看无误后，上传到网站：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo d<br></code></pre></td></tr></table></figure><h3 id="设置Front-matter"><a href="#设置Front-matter" class="headerlink" title="设置Front-matter"></a>设置Front-matter</h3><p>一篇博文的前页（即<code>Front-matter</code>）描述了这篇博文的一些基本信息，根据<a href="https://link.zhihu.com/?target=https://hexo.io/docs/front-matter">官方文档</a>，共有11类设置。这里主要介绍一下比较常用的设置： (1) categories（类别） 该属性用于对博文进行分类，例如是属于python还是属于java。类别有层次之分，在描述时需要从高到低，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Programming</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Python</span><br> <span class="hljs-string">```</span><br> <span class="hljs-string">本例说明该博文属于`Programming`类别下的`Python`子类。</span><br> <span class="hljs-string">(2)</span> <span class="hljs-string">tags（标签）</span><br> <span class="hljs-string">该属性用于描述博文的性质，例如该博文是经验分享还是刷题解析。标签是没有层次之分，描述时无顺序要求，例如：</span><br> <span class="hljs-string">```yaml</span><br> <span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">经验</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">后端</span><br></code></pre></td></tr></table></figure><p>本例说明该博文主要讲述了后端的经验分享。 (3) excerpt（摘要） 摘要会出现在博客首页，对整篇博文进行一个简要的介绍。根据<a href="https://link.zhihu.com/?target=https://www.dazhuanlan.com/sunningjiao/topics/1360401">资料</a>，设置摘要共有三种方法。官方推荐的方法是使用 <code>&lt;!-- more --&gt;</code> 进行手动截断，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">这是标题</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">这是摘要</span><br><span class="hljs-string">&lt;!--</span> <span class="hljs-string">more</span> <span class="hljs-string">--&gt;</span><br><span class="hljs-string">这是正文</span>   <span class="hljs-comment"># 注意：正文在显示时仍包括了上述摘要部分</span><br></code></pre></td></tr></table></figure><p>我个人推荐在前页中添加<code>excerpt</code>字段来手动输入摘要：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">这是标题</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">这是摘要</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>这样设置摘要自由度较高，无需担心摘要和正文内容不同。</p><h3 id="设置博文的url"><a href="#设置博文的url" class="headerlink" title="设置博文的url"></a>设置博文的url</h3><p>Hexo中一篇博文默认的url为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">:year/:month/:day/:title/</span>   <span class="hljs-comment"># 年/月/日/文章路径+博文名字</span><br></code></pre></td></tr></table></figure><p>这样十分容易造成中文url乱码，实际应用效果很差。<a href="https://link.zhihu.com/?target=https://blog.csdn.net/qq_41942221/article/details/116007091">这篇博文</a>给出了两种解决方案。这里我推荐将<code>source/_posts</code>下的各个md文件按照类似<code>blog00x</code>的顺序进行命名，然后在站点根目录下的<code>_config.yml</code>文件中做如下设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:title/</span><br></code></pre></td></tr></table></figure><p>对于懒人则可以使用Hash的方式，这样不需要进行统一编号，设置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:hash/</span><br></code></pre></td></tr></table></figure><p>值得注意的是这里参考了<a href="https://link.zhihu.com/?target=https://zkqiang.cn/">官方推送的个人博客网站</a>，没有使用年月日来设置url，而是采用<code>posts</code>来设置url，避免网址冗余。</p><h3 id="设置博文中的图片"><a href="#设置博文中的图片" class="headerlink" title="设置博文中的图片"></a>设置博文中的图片</h3><p>一篇博文的图片可以分为两类：第一类是在首页显示的博文封面图，第二类是在文章正文中显示的内容图。放置与引用这些图片有很多很多种方式，这里我推荐一下我个人的设置，并不代表它是最方便、最合适的，但是我个人用起来最为舒服，具体如下： 对于每一篇博文（即放在_posts中的每一个md文件），都在<code>source/img</code>目录下新建一个和博客同名的文件夹，将所有的图片（包括封面图和内容图）统一放在其中。对于封面图，在博文md文件的前页中添加如下信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/博客名/图片名</span>  <span class="hljs-comment"># 图片要加扩展名jpg等，下同</span><br></code></pre></td></tr></table></figure><p>对于内容图，直接在正文的相应位置做如下引用即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-type">![</span><span class="hljs-string">图片标题](/img/博客名/图片名)</span><br></code></pre></td></tr></table></figure><p>如果之后的网站具有一定规模，图片较多难以管理，可以采用图床进行云管理，详见<a href="https://link.zhihu.com/?target=https://www.cnblogs.com/huanhao/p/picup.html">这里</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo_Fluid</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux Study Diary</title>
    <link href="/2022/11/18/Linux-Study-Diary/"/>
    <url>/2022/11/18/Linux-Study-Diary/</url>
    
    <content type="html"><![CDATA[<p><strong>Linux发行版</strong> </p><ul><li>流行的 Linux 发行版包括<a href="https://en.wikipedia.org/wiki/Debian">Debian</a>、<a href="https://en.wikipedia.org/wiki/Fedora_Linux">Fedora Linux</a>和<a href="https://en.wikipedia.org/wiki/Ubuntu">Ubuntu</a>，它们本身有许多不同的发行版和修改版本，包括<a href="https://en.wikipedia.org/wiki/Lubuntu">Lubuntu</a>和<a href="https://en.wikipedia.org/wiki/Xubuntu">Xubuntu</a>。</li><li>商业发行版包括<a href="https://en.wikipedia.org/wiki/Red_Hat_Enterprise_Linux">Red Hat Enterprise Linux</a>和<a href="https://en.wikipedia.org/wiki/SUSE_Linux_Enterprise">SUSE Linux Enterprise</a>。</li><li>桌面 Linux 发行版包括一个<a href="https://en.wikipedia.org/wiki/Windowing_system">窗口系统</a>，例如<a href="https://en.wikipedia.org/wiki/X11">X11</a>或<a href="https://en.wikipedia.org/wiki/Wayland_(display_server_protocol)">Wayland</a>，以及一个<a href="https://en.wikipedia.org/wiki/Desktop_environment">桌面环境</a>，例如<a href="https://en.wikipedia.org/wiki/GNOME">GNOME</a>或<a href="https://en.wikipedia.org/wiki/KDE_Plasma_5">KDE Plasma</a>。用于<a href="https://en.wikipedia.org/wiki/Server_(computing)">服务器的发行版</a>可能会完全省略<a href="https://en.wikipedia.org/wiki/Computer_graphics">图形</a>，或包含<a href="https://en.wikipedia.org/wiki/Solution_stack">解决方案堆栈</a>，例如<a href="https://en.wikipedia.org/wiki/LAMP_(software_bundle)">LAMP</a>。因为 Linux 是可自由再分发的，所以任何人都可以出于任何目的创建一个分发版。</li></ul><hr><p><strong>Linux优点</strong>–<em>为什么绝大多数服务器部署在Linux上，而不是其他操作系统</em></p><p><em><strong>1.开源</strong></em> </p><p>Linux Server 相较 Windows Server 领先的首要原因是完全免费且可用作开源用途。通过开源方式，您可以轻松查看用于创建 Linux 内核的代码，也可以对代码进行修改和再创作。通过许多编程接口，您甚至可以开发自己的程序并将其添加到 Linux 操作系统中。还可以对 Linux Server 操作系统进行自定义，以满足使用要求，这是 Windows 无法实现的。</p><p><em><strong>2.稳定性</strong></em><br>Linux 系统一直以其稳定性而闻名，它们可以连续运行多年而不发生任何重大问题。事实上，很多 Linux 用户都从未在自己的环境中遇到过系统崩溃的情况。相对 Windows 而言，挂起和崩溃完全是一种常态。</p><p>尽管 Windows 也可以很好地执行多任务处理，但 Linux 可以在处理各种任务的同时，仍能提供坚如磐石的性能。</p><p>当将 Linux 与 Windows 进行对比时，对每项系统配置的更改都需要重启 Windows Server，而 Linux 更改大多数配置时都无需重启服务器即可生效，这也确保了 Linux 服务器最短的停机时间。</p><p><em><strong>3.安全</strong></em><br>Linux 由最初的多用户操作系统开发的 UNIX 操作系统发展而来，在安全方面显然比 Windows 更强。与 Windows 作为病毒和恶意软件攻击的首要目标不同，Linux Server 只有管理员或特定用户才有权访问 Linux 内核，而且 Linux 服务器（相较 Windows 而言）不会经常受到攻击，并且被发现的任何漏洞都会在第一时间由大批 Linux 开发人员修复。</p><p><em><strong>4.硬件</strong></em><br>当将 Linux Server 与 Windows Server 在硬件方面进行比较时，Windows 需要经常对硬件进行升级以满足各方面性能需求。而 Linux 对硬件的需求则很低，也不需要频繁对硬件进行升级更新，并且无论系统架构或处理器如何，都能表现得非常出色。</p><p><em><strong>5.灵活性</strong></em><br>Linux 是世界上最灵活的操作系统，没有之一，您可以根据需要自定义系统。使用 Linux，您可以随心所欲地安装 GUI 界面或仅使用「终端」管理服务器；使用 Linux，您可以选择各种工具和实用程序来管理所有与服务器相关的活动，如：添加用户、管理服务和网络，安装新应用程序以及监控性能等。</p><p>而 Shell 是 Linux 系统中最强大的组件，允许您运行各种程序并允许与内核进行交互。 总的来说，Linux 为您提供了对服务器的完全控制、掌控权利。</p><p><em><strong>6.总体拥有成本（TCO）和维护</strong></em><br>在总体拥有成本方面，由于 Linux 在使用上属于完全免费。即便您购买了针对企业或组织的 Linux 发行版，也会比 Windows 或其他许可软件花费更少。</p><p><em><strong>7.自由</strong></em><br>对 Linux 而言，您不会被商业供应商强加产品和服务，用户可以自由选择适合需求的产品。正是这种自由使得像 Amazon 和 Google 这样的大公司选择了基于 Linux 的服务器来提供服务。</p><p><em><strong>8.访问开源应用程序</strong></em><br>Linux 为开源应用程序开辟了一个新的世界，有数以千计的开源应用程序正在等待用户探索，您甚至可以使用特殊界面在 Linux 服务器上运行 Windows 应用程序。</p><p><em><strong>9.易于变更</strong></em><br>与 Windows Servers 不同，您可以轻松对 Linux Server 进行变更，并且无需重启服务器。对于 Windows Server 而言，要使用微软发布的新功能就得购买下一个版本。</p><p><em><strong>10.社区支持</strong></em><br>Linux 社区在全球都十分活跃和使用广泛，总有数千名志愿者在线活动以解决其他Linux 用户的问题，所以几乎在任何 Linux 论坛上发布的任何问题都会得到即时响应。而选择使用 Linux Enterprise 版本时，还会附有付费支持选项。</p>]]></content>
    
    
    <categories>
      
      <category>Study-Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/18/hello-world/"/>
    <url>/2022/11/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Welcome</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
