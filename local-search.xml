<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Make和Makefile</title>
    <link href="/2024/03/14/Make%E5%92%8CMakefile/"/>
    <url>/2024/03/14/Make%E5%92%8CMakefile/</url>
    
    <content type="html"><![CDATA[<h1 id="Make-amp-Makefile"><a href="#Make-amp-Makefile" class="headerlink" title="Make&amp;Makefile"></a>Make&amp;Makefile</h1><h2 id="1-Makefile"><a href="#1-Makefile" class="headerlink" title="1.Makefile"></a>1.Makefile</h2><h3 id="第一层：显式规则"><a href="#第一层：显式规则" class="headerlink" title="第一层：显式规则"></a>第一层：显式规则</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">是注释</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">基本格式:</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#目标文件: 依赖文件</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">[TAB]指令</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#第一个目标文件是最终目标(类似于递归)</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#伪目标：</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">.PHONY</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">clear:</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">rm</span> -rf hello.o hello.S hello.i hello</span><br></code></pre></td></tr></table></figure><p>执行make指令后，不会主动执行伪目标后的指令，指令名称可以随便定义，但尽量使用更具体、更直观的名称。当主动调用伪目标后的指令时，才起作用</p><p><code>make clear</code></p><p>eg:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">hello:hello.o</span><br>gcc hello.o -o hello<br><span class="hljs-section">hello.o:hello.S</span><br>gcc -c hello.S -o hello.o<br><span class="hljs-section">hello.S:hello.i</span><br>gcc -S hello.i -o hello.S<br><span class="hljs-section">hello.i:hello.c</span><br>gcc -E hello.c -o hello.i<br><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>:</span><br><span class="hljs-section">clear:</span><br>rm -rf hello.o hello.S hello.i<br></code></pre></td></tr></table></figure><p>终端输入<code>make</code>后，会自动执行Makefile文件中的指令，生成hello 、hello.o、hello.S、hello.i 等文件</p><p>再次输入<code>make clear</code>后，删除文件只保留生成的hello文件</p><h3 id="第二层-变量-x3D-替换-x3D-追加-x3D-恒等"><a href="#第二层-变量-x3D-替换-x3D-追加-x3D-恒等" class="headerlink" title="第二层: 变量&#x3D;(替换)+&#x3D;(追加):&#x3D;(恒等)"></a>第二层: 变量&#x3D;(替换)+&#x3D;(追加):&#x3D;(恒等)</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">test: circle.o cube.o main.o</span><br>gcc circle.o cube.o main.o -o test<br><span class="hljs-section">circle.o:circle.c</span><br>gcc -c circle.c -o circle.o<br><span class="hljs-section">cube.o:cube.c</span><br>gcc -c cube.c -o cube.o<br><span class="hljs-section">main.o:main.c</span><br>gcc -c main.c -o main.o<br></code></pre></td></tr></table></figure><p>使用$(变量名) 替换</p><p>变量替换后:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs makefile">TAR = test<br>CC := gcc<br>OBJ = circle.o cube.o main.o<br><br><span class="hljs-variable">$(TAR)</span>:<span class="hljs-variable">$(OBJ)</span><br><span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(OBJ)</span> -o <span class="hljs-variable">$(TAR)</span><br><span class="hljs-section">circle.o:circle.c</span><br><span class="hljs-variable">$(CC)</span> -c circle.c -o circle.o<br><span class="hljs-section">cube.o:cube.c</span><br><span class="hljs-variable">$(CC)</span> -c cube.c -o cube.o<br><span class="hljs-section">main.o:main.c</span><br><span class="hljs-variable">$(CC)</span> -c main.c -o main.o<br><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>:</span><br><span class="hljs-section">clear:</span><br>rm -rf <span class="hljs-variable">$(OBJ)</span><br></code></pre></td></tr></table></figure><h3 id="第三层：隐式规则-c-o-任意的-c-或者-o-c-o-所有的-c-o"><a href="#第三层：隐式规则-c-o-任意的-c-或者-o-c-o-所有的-c-o" class="headerlink" title="第三层：隐式规则 %.c %.o 任意的 .c 或者 .o*.c *.o 所有的.c .o"></a>第三层：隐式规则 %.c %.o 任意的 .c 或者 .o*.c *.o 所有的.c .o</h3><p>上述代码优化后:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs makefile">TAR = test<br>CC := gcc<br>OBJ = circle.o cube.o main.o<br><br><span class="hljs-variable">$(TAR)</span>:<span class="hljs-variable">$(OBJ)</span><br><span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(OBJ)</span> -o <span class="hljs-variable">$(TAR)</span><br><span class="hljs-section">%.o:%.c</span><br><span class="hljs-variable">$(CC)</span> -c %.c -o %.o<br><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>:</span><br><span class="hljs-section">clear:</span><br>rm -rf <span class="hljs-variable">$(OBJ)</span><br></code></pre></td></tr></table></figure><h3 id="第四层：通配符-所有的依赖文件-所有的目标文件-lt-所有的依赖文件的第一个文件"><a href="#第四层：通配符-所有的依赖文件-所有的目标文件-lt-所有的依赖文件的第一个文件" class="headerlink" title="第四层：通配符$^ 所有的依赖文件$@ 所有的目标文件$&lt; 所有的依赖文件的第一个文件"></a>第四层：通配符$^ 所有的依赖文件$@ 所有的目标文件$&lt; 所有的依赖文件的第一个文件</h3><p>上述代码替换后：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs makefile">TAR = test<br>CC := gcc<br>OBJ = circle.o cube.o main.o<br><br><span class="hljs-variable">$(TAR)</span>:<span class="hljs-variable">$(OBJ)</span><br><span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><span class="hljs-section">%.o:%.c</span><br><span class="hljs-variable">$(CC)</span> -c <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>:</span><br><span class="hljs-section">clear:</span><br>rm -rf <span class="hljs-variable">$(OBJ)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>语言文件操作</title>
    <link href="/2024/03/03/%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <url>/2024/03/03/%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="语言文件操作"><a href="#语言文件操作" class="headerlink" title="语言文件操作"></a>语言文件操作</h1><h2 id="本章重点"><a href="#本章重点" class="headerlink" title="本章重点"></a>本章重点</h2><ol><li>为什么使用文件</li><li>什么是文件</li><li>文件的打开和关闭</li><li>文件的顺序读写</li><li>文件的随机读写</li><li>文本文件和二进制文件</li><li>文件读取结束的判定</li><li>文件缓冲区</li></ol><hr><h2 id="1-为什么使用文件"><a href="#1-为什么使用文件" class="headerlink" title="1.为什么使用文件"></a>1.为什么使用文件</h2><p>​前面学习结构体时，写了通讯录的程序，当通讯录运行起来的时候，可以给通讯录中增加、删除数据，此时数据是存放在内存中，当程序退出的时候，通讯录中的数据自然就不存在了，等下次运行通讯录程序的时候，数据又得重新录入，如果使用这样的通讯录就很难受。</p><p>​既然是通讯录就应该把信息记录下来，只有我们自己选择删除数据的时候，数据才不复存在。这就涉及到了数据持久化的问题，一般数据持久化的方法有，把数据存放在磁盘文件、存放到数据库等方式。</p><p>​使用文件可以将数据直接存放在电脑的硬盘上，做到了数据的持久化。</p><h2 id="2-什么是文件"><a href="#2-什么是文件" class="headerlink" title="2.什么是文件"></a>2.什么是文件</h2><p>磁盘上的文件是文件。</p><p>但是在程序设计中，一般谈的文件有两种：程序文件、数据文件（从文件功能的角度来分类）。</p><h3 id="2-1-程序文件"><a href="#2-1-程序文件" class="headerlink" title="2.1 程序文件"></a>2.1 程序文件</h3><blockquote><p>包括源程序文件（后缀为.c）,目标文件（windows环境后缀为.obj）,可执行程序（windows环境后缀为.exe）。</p></blockquote><h2 id="2-2-数据文件"><a href="#2-2-数据文件" class="headerlink" title="2.2 数据文件"></a>2.2 数据文件</h2><blockquote><p>文件的内容不一定是程序，而是程序运行时读写的数据，比如程序运行需要从中读取数据的文件，或者输出内容的文件。</p></blockquote><p>本章讨论的是数据文件。</p><p>在以前各章所处理数据的输入输出都是以终端为对象的，即从终端的键盘输入数据，运行结果显示到显示器上。</p><h3 id="2-3-文件名"><a href="#2-3-文件名" class="headerlink" title="2.3 文件名"></a>2.3 文件名</h3><p>一个文件要有一个唯一的文件标识，以便用户识别和引用。</p><p>文件名包括3部分：文件路径+文件名主干+文件后缀</p><p>例如：<code>c:\code\test.txt</code></p><p>为了方便起见，文件标识常被称为<strong>文件名</strong>。</p><h2 id="3-文件的打开和关闭"><a href="#3-文件的打开和关闭" class="headerlink" title="3.文件的打开和关闭"></a>3.文件的打开和关闭</h2><h3 id="3-1-文件指针"><a href="#3-1-文件指针" class="headerlink" title="3.1 文件指针"></a>3.1 文件指针</h3><p>缓冲文件系统中，关键的概念是”<strong>文件类型指针</strong>“，简称”<strong>文件指针</strong>“。</p><p>每个被使用的文件都在内存中开辟了一个相应的<strong>文件信息区</strong>，用来存放文件的相关信息(如文件的名字，文件状态及文件当前的位置等)。这些信息是保存在一个结构体变量中的。该结构体类型是有系统<br>声明的，取名<strong>FILE</strong>.</p><p>例如，VS2013编译环境提供的 stdio.h 头文件中有以下的文件类型申明:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">iobuf</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> *_ptr;<br>    <span class="hljs-type">int</span> _cnt;<br>    <span class="hljs-type">char</span> *_base;<br>    <span class="hljs-type">int</span> _flag;<br>    <span class="hljs-type">int</span> _file;<br>    <span class="hljs-type">int</span> _charbuf;<br>    <span class="hljs-type">int</span> _bufsiz;<br>    <span class="hljs-type">char</span> *_tmpfname;<br>&#125;;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">iobuf</span> <span class="hljs-title">FILE</span>;</span><br></code></pre></td></tr></table></figure><p>不同的C编译器的FILE类型包含的内容不完全相同，但是大同小异。</p><p>每当打开一个文件的时候，系统会根据文件的情况自动创建一个FILE结构的变量，并填充其中的信息，使用者不必关心细节。</p><p>一般都是通过一个FILE的指针来维护这个FILE结构的变量，这样使用起来更加方便。</p><p>下面我们可以创建一个<code>FILE*</code> 的指针变量:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">FILE* pf;<span class="hljs-comment">//文件指针变量</span><br></code></pre></td></tr></table></figure><p>定义pf是一个指向FILE类型数据的指针变量。可以使pf指向某个文件的文件信息区(是一个结构体变量)。通过该文件信息区中的信息就能够访问该文件。也就是说，<strong>通过文件指针变量能够找到与它关联<br>的文件</strong>。</p><p>比如：</p><p><img src="/img/%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF%E5%8C%BA.jpg" alt="文件信息区"></p><h3 id="3-2文件的打开和关闭"><a href="#3-2文件的打开和关闭" class="headerlink" title="3.2文件的打开和关闭"></a>3.2文件的打开和关闭</h3><p>文件在读写之前应该先<strong>打开文件</strong>，在使用结束之后应该<strong>关闭文件</strong>。</p><p>在编写程序的时候，在打开文件的同时，都会返回一个<code>FILE*</code>的指针变量指向该文件，也相当于建立了指针和文件的关系。</p><p>ANSIC规定使用fopen函数来打开文件，fclose来关闭文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//打开文件</span><br>FILE * <span class="hljs-title function_">fopen</span> <span class="hljs-params">( <span class="hljs-type">const</span> <span class="hljs-type">char</span> * filename, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * mode )</span>;<br><span class="hljs-comment">//mode - &quot;r&quot;、&quot;w&quot;、&quot;a&quot;</span><br><span class="hljs-comment">//关闭文件</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fclose</span> <span class="hljs-params">( FILE * stream )</span>;<br></code></pre></td></tr></table></figure><p>打开和关闭方式如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//打开</span><br>FILE* pf =fopen(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);   <br>    <span class="hljs-keyword">if</span>(pf==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,strerror(errno));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//关闭</span><br>    fclose(pf);<br>    pf=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-文件的打开模式"><a href="#3-3-文件的打开模式" class="headerlink" title="3.3 文件的打开模式"></a>3.3 文件的打开模式</h3><table><thead><tr><th>文件使用方式</th><th>含义</th></tr></thead><tbody><tr><td>“<strong>r(只读)</strong>“</td><td>为了输入数据，打开一个已经存在的文本文件</td></tr><tr><td>“<strong>w(只写)</strong>“</td><td>为了输出数据，打开一个文本文件</td></tr><tr><td>“<strong>a(追加)</strong>“</td><td>向文件末尾添加数据</td></tr><tr><td>“rb(只读)”</td><td>为了输入数据，打开一个二进制文件</td></tr><tr><td>“wb(只写)”</td><td>为了输出数据，打开一个二进制文件</td></tr><tr><td>“ab(追加)”</td><td>向一个二进制文件尾添加数据</td></tr><tr><td>“r+(读写)”</td><td>为了读和写，打开一个文本文件</td></tr><tr><td>“w+(读写)”</td><td>为了读和写，建立一个新的文件</td></tr><tr><td>“a+(读写)”</td><td>打开一个文件，在文件尾进行读写</td></tr><tr><td>“rb+(读写)”</td><td>为了读和写打开一个二进制文件</td></tr><tr><td>“wb+(读写)”</td><td>为了读和写，新建一个新的二进制文件</td></tr><tr><td>“ab+(读写)”</td><td>打开一个二进制文件，在文件尾进行读和写</td></tr></tbody></table><h3 id="3-4文件的顺序读写"><a href="#3-4文件的顺序读写" class="headerlink" title="3.4文件的顺序读写"></a>3.4文件的顺序读写</h3><table><thead><tr><th align="left">功能</th><th align="center">函数名</th><th align="center">适用于</th></tr></thead><tbody><tr><td align="left">字符输入函数</td><td align="center">fgetc</td><td align="center">所有输入流</td></tr><tr><td align="left">字符输出函数</td><td align="center">fputc</td><td align="center">所有输出流</td></tr><tr><td align="left">文本行输入函数</td><td align="center">fgets</td><td align="center">所有输入流</td></tr><tr><td align="left">文本行输出函数</td><td align="center">fputs</td><td align="center">所有输出流</td></tr><tr><td align="left">格式化输入函数</td><td align="center">fscanf</td><td align="center">所有输入流</td></tr><tr><td align="left">格式化输出函数</td><td align="center">fprintf</td><td align="center">所有输出流</td></tr><tr><td align="left">二进制输入</td><td align="center">fread</td><td align="center">文件</td></tr><tr><td align="left">二进制输出</td><td align="center">fwrite</td><td align="center">文件</td></tr></tbody></table><blockquote><p>任何一个C程序，只要运行起来就会默认打开3个流</p><p>FILE* stdin - 标准输入流(键盘)</p><p>FILE* stdout - 标准输出流(屏幕)</p><p>FILE* stderr - 标准错误流(屏幕)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span><span class="hljs-params">( <span class="hljs-type">int</span> ch, FILE *stream )</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">putc</span><span class="hljs-params">( <span class="hljs-type">int</span> ch, FILE *stream )</span>; <br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//FILE* pf = fopen(&quot;test.txt&quot;,&quot;w&quot;);</span><br>FILE* pf = fopen(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <br>    <span class="hljs-keyword">if</span>(pf==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,strerror(errno));<br>    &#125;<br>    <span class="hljs-comment">//写文件</span><br>    <span class="hljs-comment">//fputc(&#x27;a&#x27;,pf);</span><br>    <span class="hljs-comment">//char i = 0;</span><br>    <span class="hljs-comment">//for(i=&#x27;b&#x27;;i&lt;&#x27;z&#x27;;i++)</span><br>    <span class="hljs-comment">//&#123;</span><br>    <span class="hljs-comment">//    fputc(i,pf);</span><br>    <span class="hljs-comment">//&#125;</span><br>    <span class="hljs-comment">//读文件</span><br>    <span class="hljs-comment">//int ch = fgetc(pf);</span><br>    <span class="hljs-comment">//printf(&quot;%c\n&quot;,ch);</span><br>    <span class="hljs-type">int</span> ch = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>((ch=fgetc(pf)!=EOF))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,ch);<br>    &#125;<br>    <br>    <span class="hljs-comment">//关闭文件</span><br>    fclose(pf);<br>    pf=<span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fputs</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str,FILE * stream)</span>;<br><span class="hljs-type">char</span>* <span class="hljs-title function_">fgets</span><span class="hljs-params">(<span class="hljs-type">char</span> *str,<span class="hljs-type">int</span> num,FILE *stream)</span>;<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//FILE* pf = fopen(&quot;test.txt&quot;,&quot;w&quot;);</span><br>FILE* pf = fopen(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <br>    <span class="hljs-keyword">if</span>(pf==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,strerror(errno));<br>        perror(<span class="hljs-string">&quot;fpoen&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//写一行数据</span><br>    <span class="hljs-comment">//写文件时会将文件中的内容清空后再写</span><br>    <span class="hljs-comment">//fputs(&#x27;hello bit\n&#x27;,pf);</span><br>    <br>    <span class="hljs-comment">//读一行数据</span><br>    <span class="hljs-type">char</span> arr[<span class="hljs-number">20</span>];<br>fgets(arr,<span class="hljs-number">5</span>,pf);  <span class="hljs-comment">//只读4个 + &#x27;\0&#x27;存入到arr里</span><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,arr);<br>    <br>    <span class="hljs-comment">//关闭文件</span><br>    fclose(pf);<br>    pf=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fprintf</span><span class="hljs-params">(FILE* stream, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* format, ... )</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">fscanf</span><span class="hljs-params">(FILE* stream, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* format, ... )</span>;<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> arr[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">float</span> score;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span> <span class="hljs-title">s</span> =</span> &#123;<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">25</span>,<span class="hljs-number">50.5f</span>&#125;;<br>    <br><span class="hljs-comment">//FILE* pf = fopen(&quot;test.txt&quot;,&quot;w&quot;);</span><br>FILE* pf = fopen(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <br>    <span class="hljs-keyword">if</span>(pf==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;fpoen&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//fprintf(pf,&quot;%s %d %f&quot;,s.arr,s.age,s.score);</span><br>    <br>    <span class="hljs-comment">//将数据打印到屏幕上</span><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stdout</span>,<span class="hljs-string">&quot;%s %d %f&quot;</span>,s.arr,s.age,s.score)<br>    <br>    <span class="hljs-comment">//fscanf(pf,&quot;%s %d %f&quot;,s.arr,&amp;(s.age),&amp;(s.score));</span><br>    <br>    <span class="hljs-comment">//关闭文件</span><br>    fclose(pf);<br>    pf=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> <span class="hljs-title function_">fwrite</span><span class="hljs-params">( <span class="hljs-type">const</span> <span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> count,FILE *stream )</span>;<br><span class="hljs-type">size_t</span> <span class="hljs-title function_">fread</span><span class="hljs-params">( <span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> count,FILE *stream )</span>;<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> arr[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">float</span> score;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//struct S s = &#123;&quot;zhangsan&quot;,25,50.5f&#125;;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span> <span class="hljs-title">s</span> =</span> &#123;<span class="hljs-number">0</span>&#125;;<br>    <br>    <br><span class="hljs-comment">//FILE* pf = fopen(&quot;test.txt&quot;,&quot;wb&quot;);</span><br>FILE* pf = fopen(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;wr&quot;</span>);<br>    <br>    <span class="hljs-keyword">if</span>(pf==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;fpoen&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><span class="hljs-comment">//二进制的方式写</span><br>    <span class="hljs-comment">//fwrite(&amp;s,sizeof(struct S),1,pf);</span><br>    <br>    fread(&amp;s,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> S),<span class="hljs-number">1</span>,pf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d %f&quot;</span>,s.arr,s.age,s.score);<br>    <br>    <span class="hljs-comment">//关闭文件</span><br>    fclose(pf);<br>    pf=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-对比下面的几组函数"><a href="#3-5-对比下面的几组函数" class="headerlink" title="3.5 对比下面的几组函数"></a>3.5 对比下面的几组函数</h3><blockquote><p>scanf&#x2F;fscanf&#x2F;sscanf</p><p>printf&#x2F;fprinft&#x2F;sprintf</p></blockquote><blockquote><p>scanf 是针对标准输入的格式化输入语句<br>prinf 是针对标准输出的格式化输出语句</p><p>fscanf 是针对所有输入流的格式化输入语句<br>fprintf 是针对所有输出流的格式化输出语句</p><p>sscanf从一个字符串中转化处一个格式化的数据<br>sprintf是把一个格式化的数据转化成字符串</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sscanf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* s,<span class="hljs-type">const</span> <span class="hljs-type">char</span> * format)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sprintf</span><span class="hljs-params">(<span class="hljs-type">char</span>* str,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* format,...)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span> <span class="hljs-title">s</span> =</span> &#123;<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">55.5f</span>&#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span> <span class="hljs-title">s</span> =</span>( <span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">55.5f</span> &#125;;<br><span class="hljs-keyword">struct</span> S tmp = &#123; <span class="hljs-number">0</span> ];<br><span class="hljs-type">char</span> buf[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>                <br>    <span class="hljs-comment">//把s中的格式化数据转化成字符串放到buf中</span><br>    <span class="hljs-built_in">sprintf</span>(buf,<span class="hljs-string">&quot;%s %d %f&quot;</span>, s.arr, s.age, s.score);<br><br>    <span class="hljs-comment">//&quot;zhangsan 20 55.500000&quot;,</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>，buf);<br><br>    <span class="hljs-comment">//从字符串buf中获取一个格式化的数据到tmp中</span><br>    <span class="hljs-built_in">sscanf</span>(buf,<span class="hljs-string">&quot;%s %d %f&quot;</span>, tmp.arr, &amp;(tmp.age), &amp;(tmp.score));<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d %f\n&quot;</span>,tmp.arr,tmp.age,tmp.score);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-文件的随机读写"><a href="#4-文件的随机读写" class="headerlink" title="4.文件的随机读写"></a>4.文件的随机读写</h2><h2 id="4-1-fseek"><a href="#4-1-fseek" class="headerlink" title="4.1 fseek"></a>4.1 fseek</h2><blockquote><p>根据文件指针的位置和偏移量来定位文件指针。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fseek</span><span class="hljs-params">(FILE * stream, <span class="hljs-type">long</span> <span class="hljs-type">int</span> offset,<span class="hljs-type">int</span> origin)</span>;<br></code></pre></td></tr></table></figure><blockquote><p>origin:</p><p>SEEK_SET - 文件起始的位置开始</p><p>SEEK_CUR - 文件当前的位置开始</p><p>SEEK_END - 定位到文件末尾</p></blockquote><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;   <br><span class="hljs-comment">//FILE* pf = fopen(&quot;test.txt&quot;,&quot;b&quot;);</span><br>FILE* pf = fopen(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <br>    <span class="hljs-keyword">if</span>(pf==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;fpoen&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><span class="hljs-comment">//读文件</span><br>    <span class="hljs-comment">//定位文件指针</span><br>    fseek(pf,<span class="hljs-number">2</span>,SEEK_SET);<br>    <span class="hljs-type">int</span> ch = fgetc(pf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,ch);  <span class="hljs-comment">//c</span><br>    <br>    <span class="hljs-comment">//fseek(pf,2,SEEK_CUR);</span><br>    fseek(pf,<span class="hljs-number">-1</span>,SEEK_END);<br>    ch = fgetc(pf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,ch);  <span class="hljs-comment">//f</span><br>    <br>    <span class="hljs-comment">//关闭文件</span><br>    fclose(pf);<br>    pf=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2ftell"><a href="#4-2ftell" class="headerlink" title="4.2ftell"></a>4.2ftell</h2><blockquote><p>返回文件指针相对于起始位置的偏移量</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">long</span> <span class="hljs-type">int</span> <span class="hljs-title function_">ftell</span><span class="hljs-params">(FILE * stream)</span>;<br></code></pre></td></tr></table></figure><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;   <br><span class="hljs-comment">//FILE* pf = fopen(&quot;test.txt&quot;,&quot;b&quot;);</span><br>FILE* pf = fopen(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <br>    <span class="hljs-keyword">if</span>(pf==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;fpoen&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><span class="hljs-comment">//读文件</span><br>    <span class="hljs-comment">//定位文件指针</span><br>    fseek(pf,<span class="hljs-number">2</span>,SEEK_SET);<br>    <span class="hljs-type">int</span> ch = fgetc(pf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,ch);  <span class="hljs-comment">//c</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ftell(pf));<br>    <br>    <span class="hljs-comment">//fseek(pf,2,SEEK_CUR);</span><br>    fseek(pf,<span class="hljs-number">-1</span>,SEEK_END);<br>    ch = fgetc(pf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,ch);  <span class="hljs-comment">//f</span><br>    <br>    <span class="hljs-comment">//关闭文件</span><br>    fclose(pf);<br>    pf=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3rewind"><a href="#4-3rewind" class="headerlink" title="4.3rewind"></a>4.3rewind</h2><blockquote><p>让文件指针的回到文件的起始位置</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;   <br><span class="hljs-comment">//FILE* pf = fopen(&quot;test.txt&quot;,&quot;b&quot;);</span><br>FILE* pf = fopen(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <br>    <span class="hljs-keyword">if</span>(pf==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;fpoen&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><span class="hljs-comment">//读文件</span><br>    <span class="hljs-comment">//定位文件指针</span><br>    fseek(pf,<span class="hljs-number">2</span>,SEEK_SET);<br>    <span class="hljs-type">int</span> ch = fgetc(pf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,ch);  <span class="hljs-comment">//c</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ftell(pf));<br>    <br>    <span class="hljs-comment">//fseek(pf,2,SEEK_CUR);</span><br>    fseek(pf,<span class="hljs-number">-1</span>,SEEK_END);<br>    ftell(pf);<br>    ch = fgetc(pf);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,ch);  <span class="hljs-comment">//a</span><br>    <br>    <span class="hljs-comment">//关闭文件</span><br>    fclose(pf);<br>    pf=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-文本文件和二进制文件"><a href="#5-文本文件和二进制文件" class="headerlink" title="5.文本文件和二进制文件"></a>5.文本文件和二进制文件</h2><p>根据数据的组织形式，数据文件被称为<strong>文本文件</strong>或者<strong>二进制文件</strong><br>数据在内存中以二进制的形式存储，如果不加转换的输出到外存，就是<strong>二进制文件</strong>。<br>如果要求在外存上以ASCI码的形式存储，则需要在存储前转换。以ASCII字符的形式存储的文件就是<strong>文本文件</strong>。<br>个数据在内存中是怎么存储的呢?<br>字符一律以ASCI形式存储，数值型数据既可以用ASCI形式存储，也可以使用二进制形式存储.<br>如有整数10000，如果以ASCI码的形式输出到磁盘，则磁盘中占用5个字节(每个字符一个字节)，而二进制形式输出，则在磁盘上只占4个字节(VS2013测试)。</p><p>二进制存放：<code>00000000 00000000 00100111 00010000</code></p><p>ASCII形式：<code>00110001 00110000 00110000 00110000 00110000</code></p><p>测试代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">10000</span>;<br>    FILE* pf = fopen(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>);<br>    fwrite(&amp;a,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,pf);<br>    fclose(pf);<br>    pf = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-文件读取结束的判定"><a href="#6-文件读取结束的判定" class="headerlink" title="6.文件读取结束的判定"></a>6.文件读取结束的判定</h2><h3 id="6-1-被错误使用的feof"><a href="#6-1-被错误使用的feof" class="headerlink" title="6.1 被错误使用的feof"></a>6.1 被错误使用的<code>feof</code></h3><p>牢记: 在文件读取过程中，不能用feof函数的返回值直接用来判断文件的是否结束。</p><p>而是<strong>应用于当文件读取结束的时候，判断是读取失败结束，还是遇到文件尾结束</strong>。</p><ol><li><p>文本文件读取是否结束，判断返回值是否为<code>EOF</code> (<code>fgetc</code>)，或者<code>NULL</code> ( <code>fgets</code> )</p><p>例如:</p><ul><li><p><code>fgetc</code>判断是否为 <code>EOF</code></p></li><li><p><code>fgets</code>判断返回值是否为<code>NULL</code></p></li></ul></li><li><p>二进制文件的读取结束判断，判断返回值是否小于实际要读的个数</p><p>例如:</p><ul><li>fread判断返回值(返回值是成功读取的个数)是否小于实际要读的个数</li></ul></li></ol><p>正确的使用：</p><p><strong>文本文件的例子：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c">#incTude &lt;stdio.h&gt;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> c; <span class="hljs-comment">// 注意: int，非char，要求处理EOF</span><br>FILE* fp = fopen(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">if</span>(!fp) &#123;<br>perror(<span class="hljs-string">&quot;File opening failed&quot;</span>);<br><span class="hljs-keyword">return</span> EXIT_FAILURE;<br>    &#125;<br><span class="hljs-comment">//fgetc 当读取失败的时候或者遇到文件结束的时候，都会返回EOF</span><br><span class="hljs-keyword">while</span> ((c = fgetc(fp)) != EOF) <span class="hljs-comment">// 标准C I/0读取文件循环</span><br>    &#123;<br>        <span class="hljs-built_in">putchar</span>(c);<br>    &#125;<br><span class="hljs-comment">//判断是什么原因结束的</span><br><span class="hljs-keyword">if</span> (ferror(fp))<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;I/o error when reading&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (feof(fp))<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;End of file reached successfu1ly&quot;</span>);<br>    <br>    fclose(fp);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>二进制文件的例子：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  SIZE = <span class="hljs-number">53</span><br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-type">double</span> a[SIZE] = &#123;<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">5.</span>&#125;;<br>  FILE *fp = fopen(<span class="hljs-string">&quot;test.bin&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>); <span class="hljs-comment">// 必须用二进制模式</span><br>  fwrite(a, <span class="hljs-keyword">sizeof</span> *a, SIZE, fp);     <span class="hljs-comment">// 写 double 的数组</span><br>  fclose(fp);<br><br>  <span class="hljs-type">double</span> b[SIZE];<br>  fp = fopen(<span class="hljs-string">&quot;test.bin&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br>  <span class="hljs-type">size_t</span> ret_code = fread(b, <span class="hljs-keyword">sizeof</span> *b, SIZE, fp); <span class="hljs-comment">// 读 double 的数组</span><br>  <span class="hljs-keyword">if</span> (ret_code == SIZE)<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Array read successfully, contents: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = <span class="hljs-number">0</span>; n &lt; SIZE; ++n)<br>    &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f &quot;</span>, b[n]);<br>    &#125;<br>    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123; <span class="hljs-comment">// error handling</span><br>    <span class="hljs-keyword">if</span> (feof(fp))<br>    &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error reading test.bin: unexpected end of file\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ferror(fp))<br>    &#123;<br>      perror(<span class="hljs-string">&quot;Error reading test.bin&quot;</span>);<br>    &#125;<br>  &#125;<br>  fclose(fp);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-文件缓冲区"><a href="#7-文件缓冲区" class="headerlink" title="7.文件缓冲区"></a>7.文件缓冲区</h2><p>​ANSIC标准采用<strong>“缓冲文件系统”</strong>处理的数据文件的，所谓缓冲文件系统是指系统自动地在内存中为程序中每一个正在使用的文件开辟一块<strong>“文件缓冲区”</strong>。从内存向磁盘输出数据会先送到内存中的缓冲区，装满缓冲区后才一起送到磁盘上。如果从磁盘向计算机读入数据，则从磁盘文件中读取数据输入到内存缓冲区(充满缓冲区)，然后再从缓冲区逐个地将数据送到程序数据区(程序变量等)。缓冲区的大小根据C编译系统决定的。</p><p><img src="/img/%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/%E6%96%87%E4%BB%B6%E7%BC%93%E5%86%B2%E5%8C%BA.jpg" alt="文件缓冲区"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-comment">// VS2013 WIN10环境测试</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  FILE *pf = fopen(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>);<br>  <span class="hljs-built_in">fputs</span>(<span class="hljs-string">&quot;abcdef&quot;</span>,pf); <span class="hljs-comment">// 先将代码放在输出缓冲区</span><br>    <br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;睡眠10秒-已经写数据了,打开test.txt文件,发现文件没有内容\n&quot;</span>);<br>  sleep(<span class="hljs-number">10000</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;刷新缓冲区\n&quot;</span>);<br>  fflush(pf); <span class="hljs-comment">// 刷新缓冲区时,才将输出缓冲区的数据写到文件(磁盘)</span><br>  <span class="hljs-comment">// 注: fflush 在高版本的VS上不能使用了</span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;再睡眠10秒-此时,再次打开test.txt文件,文件有内容了\n&quot;</span>);<br>  sleep(<span class="hljs-number">10000</span>);<br>  fclose(pf);<br>  <span class="hljs-comment">// 注: fclose在关闭文件的时候,也会刷新缓冲区</span><br>  pf = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以得出一个<strong>结论</strong>:</p><p>因为有缓冲区的存在，C语言在操作文件的时候，需要做刷新缓冲区或者在文件操作结束的时候关闭文件。</p><p>如果不做，可能导致读写文件的问题。</p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>文件操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态内存管理</title>
    <link href="/2024/02/28/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <url>/2024/02/28/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="动态内存管理"><a href="#动态内存管理" class="headerlink" title="动态内存管理"></a>动态内存管理</h1><h2 id="本章重点"><a href="#本章重点" class="headerlink" title="本章重点"></a>本章重点</h2><ul><li>为什么存在动态内存分配</li><li>动态内存函数的介绍<ul><li>malloc</li><li>free</li><li>calloc</li><li>realloc</li></ul></li><li>常见的动态内存错误</li><li>经典笔试题</li><li>柔性数组</li></ul><hr><p><em>内存存储空间</em></p><table><thead><tr><th align="center">栈区</th><th align="center">堆区</th><th align="center">静态区</th></tr></thead><tbody><tr><td align="center">局部变量、形式参数、函数返回值</td><td align="center">动态内存分配：malloc、free、calloc、realloc</td><td align="center">静态变量、全局变量</td></tr></tbody></table><p><strong>每一次函数的调用都会在栈区申请内存空间</strong></p><p><strong>静态变量和全局变量默认初始化值为0</strong></p><p><strong>局部变量默认初始化值为随机值</strong></p><hr><h2 id="1-为什么存在动态内存分配"><a href="#1-为什么存在动态内存分配" class="headerlink" title="1.为什么存在动态内存分配"></a>1.为什么存在动态内存分配</h2><p>我们已经掌握的内存开辟方式有：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> val = <span class="hljs-number">20</span>; <span class="hljs-comment">//在栈空间上开辟四个字节</span><br><span class="hljs-type">char</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;; <span class="hljs-comment">//在栈空间上开辟10个字节的连续空间</span><br></code></pre></td></tr></table></figure><p>但是上述的开辟空间的方式有两个特点：</p><p>​1.空间开辟大小是固定的。</p><p>​2.数组在申明的时候，必须指定数组的长度，她所需要的内存在编译时分配。</p><p>但是对于空间的需求，不仅仅时上述的情况。有时候我们需要的空间大小在程序运行的时候才能知道，</p><p>那数组的编译时开辟空间的方式就不能满足了。</p><p>这时候就只能试试动态内存开辟了。</p><h2 id="2-动态内存函数的介绍"><a href="#2-动态内存函数的介绍" class="headerlink" title="2.动态内存函数的介绍"></a>2.动态内存函数的介绍</h2><h3 id="2-1-malloc和free"><a href="#2-1-malloc和free" class="headerlink" title="2.1 malloc和free"></a>2.1 malloc和free</h3><p>C语言提供了一个动态内存开辟的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span>* <span class="hljs-title function_">malloc</span><span class="hljs-params">( <span class="hljs-type">size_t</span> size)</span>;<br></code></pre></td></tr></table></figure><p>这个函数向内存申请一块<strong>连续可用</strong>的空间，并返回指向这块空间的指针。</p><ul><li>如果开辟成功，则返回一个指向开辟好空间的指针。</li><li>如果开辟失败，则返回一个NULL指针，因此malloc的返回值一定要做检查。</li><li>返回值的类型是<code>void*</code>，所以malloc函数并不知道开辟空间的类型，具体在使用的时候使用者自己来决定。</li><li>如果参数<code>size</code>为0，malloc的行为是标准未定义的，取决于编译器。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-comment">//动态内存开辟</span><br>    <span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">40</span>);<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,strerror(errno));<br>        retrun <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>,i++)<br>    &#123;<br>*(p+i) = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>,i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*(p+i));<br>    &#125;<br>    <br>    <span class="hljs-comment">//没有free</span><br>    <span class="hljs-comment">//并不是说内存空间就不回收了</span><br>    <span class="hljs-comment">//当程序退出的时候，系统会自动回收内存空间</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>C语言提供了另外一个函数free，专门用来做动态内存的释放和回收的，函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">free</span><span class="hljs-params">(<span class="hljs-type">void</span> * ptr)</span>;<br></code></pre></td></tr></table></figure><p>free函数用来释放动态开辟的内存。</p><ul><li>如果参数<code>ptr</code>指向的空间不是动态开辟的，那free函数的行为是未定义的。</li><li>如果参数<code>ptr</code>是NULL指针，则函数什么事都不做。</li></ul><p>malloc和free都声明在<code>stdlib.h</code>头文件中。</p><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-comment">//动态内存开辟</span><br>    <span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">40</span>);<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,strerror(errno));<br>        retrun <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> i =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>,i++)<br>    &#123;<br>*(p+i) = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>,i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*(p+i));<br>    &#125;<br>    <br><span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-comment">//p指向的内存空间无实际数值，同时需要释放指针p，避免称为野指针</span><br>    p = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-calloc"><a href="#2-2-calloc" class="headerlink" title="2.2 calloc"></a>2.2 calloc</h3><p>C语言还提供了一个函数叫<code>calloc</code>，<code>calloc</code>函数也用来动态内存分配。原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span>* <span class="hljs-title function_">calloc</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> num,<span class="hljs-type">size_t</span> size)</span>;<br></code></pre></td></tr></table></figure><ul><li>函数的功能是为<code>num</code>个大小为<code>size</code>的元素开辟一块空间，并且把空间的每个字节初始化为0。</li><li>与函数<code>malloc</code>的区别只在于<code>calloc</code>会在返回地址之前把申请的空间的每个字节初始化为全0.</li></ul><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <br>    <span class="hljs-type">int</span> *p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">10</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">if</span>(p == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,strerror(errno));<br>    &#125;<span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*(p+i));<br>            <span class="hljs-comment">//0 0 0 0 0 0 0 0 0 0</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(p);<br>    p=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-realloc"><a href="#2-3-realloc" class="headerlink" title="2.3 realloc"></a>2.3 realloc</h3><ul><li>realloc函数的出现让动态内存管理更加灵活。</li><li>有时我们会发现过去申请的空间太小了，有时侯我们又会觉得申请的空间过大了，那为了合理地使用内存，我们会对内存地大小做灵活的调整。那<code>realloc</code>函数就可以做到对动态开辟内存大小的调整。</li></ul><p>函数原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span>* <span class="hljs-title function_">realloc</span><span class="hljs-params">(<span class="hljs-type">void</span>* ptr,<span class="hljs-type">size_t</span> size)</span>;<br></code></pre></td></tr></table></figure><ul><li><code>ptr</code>是要调整的地址</li><li><code>size</code>是调整之后的大小</li><li>返回值为调整之后的内存起始位置</li><li>这个函数调整原内存空间大小的基础上，还会将原来内存中的数据移动到<code>新</code>的空间</li><li>realloc在调整内存空间时存在两种情况：<ol><li>情况1：原有空间之后有足够大的空间（直接在后面追加空间）</li><li>情况2：原有空间之后没有足够大的空间（另找一块空间，并把原来内存中的数据移动到<code>新</code>的空间）</li></ol></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> *p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">40</span>);<br>    <span class="hljs-comment">//int *p = (int*)realloc(NULL,40);</span><br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)<br>    &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,strerrpr(errno));<br>    &#125;<br>    <span class="hljs-comment">//使用</span><br>    <span class="hljs-comment">//1 2 3 4 5 6 7 8 9 10</span><br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>    &#123;<br>*(p+i) = i+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//扩容</span><br>    <span class="hljs-type">int</span> *ptr = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">realloc</span>(p,<span class="hljs-number">80</span>);<br>    <span class="hljs-comment">//可能分配失败</span><br>    <span class="hljs-keyword">if</span>(ptr != <span class="hljs-literal">NULL</span>)&#123;<br>        p=ptr;<br>    &#125;<br>    <span class="hljs-comment">//使用</span><br>    <span class="hljs-comment">//1 2 3 4 5 6 7 8 9 10</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>    &#123;<br>*(p+i) = i+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(p);<br>    p = <span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-常见的动态内存错误"><a href="#3-常见的动态内存错误" class="headerlink" title="3. 常见的动态内存错误"></a>3. 常见的动态内存错误</h2><h3 id="3-1-对NULL指针的解引用操作"><a href="#3-1-对NULL指针的解引用操作" class="headerlink" title="3.1 对NULL指针的解引用操作"></a>3.1 对NULL指针的解引用操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> *p = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(INT_MAX/<span class="hljs-number">4</span>);<br>    <span class="hljs-comment">//!!!解引用前需要判断返回值</span><br>    *p = <span class="hljs-number">20</span>;<span class="hljs-comment">//如果p的值是NULL，就会有问题</span><br>    <span class="hljs-built_in">free</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-对动态开辟空间的越界访问"><a href="#3-2-对动态开辟空间的越界访问" class="headerlink" title="3.2 对动态开辟空间的越界访问"></a>3.2 对动态开辟空间的越界访问</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> *p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">10</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,strerror(errno));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;<br>        p[i] = i;<br>    &#125;<br>    <span class="hljs-built_in">free</span>(p);<br>p = <span class="hljs-literal">NULL</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-对非动态开辟内存使用free释放"><a href="#3-3-对非动态开辟内存使用free释放" class="headerlink" title="3.3 对非动态开辟内存使用free释放"></a>3.3 对非动态开辟内存使用free释放</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> *p = &amp;a;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-built_in">free</span>(p);<br>    p = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-使用free释放一块动态开辟内存的一部分"><a href="#3-4-使用free释放一块动态开辟内存的一部分" class="headerlink" title="3.4 使用free释放一块动态开辟内存的一部分"></a>3.4 使用free释放一块动态开辟内存的一部分</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">40</span>);<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)<br>    &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>    &#123;<br>*p = i;<br>        p++;<br>    &#125;<br>    <br>    <span class="hljs-built_in">free</span>(p);<br>    p = <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5对同一块动态内存多次释放"><a href="#3-5对同一块动态内存多次释放" class="headerlink" title="3.5对同一块动态内存多次释放"></a>3.5对同一块动态内存多次释放</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">40</span>);<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-comment">//p = NULL; - 解决方法 </span><br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-built_in">free</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-动态内存开辟忘记释放"><a href="#3-6-动态内存开辟忘记释放" class="headerlink" title="3.6 动态内存开辟忘记释放"></a>3.6 动态内存开辟忘记释放</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">///example1</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">40</span>);<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;flag); <span class="hljs-comment">//5</span><br>    <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">5</span>)&#123;<br>        <span class="hljs-keyword">return</span>; <br>    &#125;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-built_in">free</span>(p);<br>    p=<span class="hljs-literal">NULL</span>;<br>    <br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    test();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//example2</span><br>vint* <span class="hljs-title function_">test</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span>* p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)<br>    &#123;<br><span class="hljs-keyword">return</span> p;<br>    &#125;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span>* ret = test();<br>    <span class="hljs-comment">//忘记释放</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-几个经典的笔试题"><a href="#4-几个经典的笔试题" class="headerlink" title="4.几个经典的笔试题"></a>4.几个经典的笔试题</h2><h3 id="4-1题目1"><a href="#4-1题目1" class="headerlink" title="4.1题目1"></a>4.1题目1</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">GetMemory</span><span class="hljs-params">(<span class="hljs-type">char</span> *p)</span><br>&#123;<br>p = (cahr*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>);<br>    <span class="hljs-comment">//p是局部变量，出了函数直接销毁</span><br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span>* str = <span class="hljs-literal">NULL</span>;<br>    GetMemory(str);<br>    <span class="hljs-built_in">strcpy</span>(str,<span class="hljs-string">&quot;hello world&quot;</span>);<br>    <span class="hljs-comment">//str是空指针，解引用时会崩溃</span><br>    <span class="hljs-built_in">printf</span>(str);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    Test();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行Test函数会发生什么?</p><h3 id="4-2-题目2"><a href="#4-2-题目2" class="headerlink" title="4.2 题目2"></a>4.2 题目2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *<span class="hljs-title function_">GetMemory</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> p[] = <span class="hljs-string">&quot;hello world&quot;</span>;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">char</span> *str  = <span class="hljs-literal">NULL</span>;<br>    str = GetMemory();<br>    <span class="hljs-built_in">printf</span>(str);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行Test函数会发生什么?</p><h3 id="4-3-题目3"><a href="#4-3-题目3" class="headerlink" title="4.3 题目3"></a>4.3 题目3</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">GetMemory</span><span class="hljs-params">(<span class="hljs-type">char</span>* p,<span class="hljs-type">int</span> num)</span><br>&#123;<br>    *p = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(num);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> *str = <span class="hljs-literal">NULL</span>;<br>    GetMemory(&amp;str,<span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">strcpy</span>(str,<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(str);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行Test函数会发生什么?</p><h3 id="4-4-题目4"><a href="#4-4-题目4" class="headerlink" title="4.4 题目4"></a>4.4 题目4</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">char</span> *str = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">strcpy</span>(str,<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-built_in">free</span>(str);<br>    <span class="hljs-keyword">if</span>(str!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br><span class="hljs-built_in">strcpy</span>(str,<span class="hljs-string">&quot;world&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行Test函数会发生什么?</p><h2 id="5-C-x2F-C-程序的内存开辟"><a href="#5-C-x2F-C-程序的内存开辟" class="headerlink" title="5.C&#x2F;C++程序的内存开辟"></a>5.C&#x2F;C++程序的内存开辟</h2><p><img src="/img/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/C&C++%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%86%85%E5%AD%98%E5%BC%80%E8%BE%9F1.jpg"></p><p><img src="/img/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/C&C++%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%86%85%E5%AD%98%E5%BC%80%E8%BE%9F2.jpg"></p><h2 id="6-柔性数组"><a href="#6-柔性数组" class="headerlink" title="6.柔性数组"></a>6.柔性数组</h2><blockquote><p>C99中，结构中的最后一个元素允许是未知大小的数组，这就叫做【柔性数组】成员</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">st_type</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">0</span>];<span class="hljs-comment">//柔性数组成员</span><br>&#125;type_a;<br></code></pre></td></tr></table></figure><p>有些编译器会报错无法编译可以改成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">st_type</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> a[];<span class="hljs-comment">//柔性数组成员</span><br>&#125;type_a;<br></code></pre></td></tr></table></figure><h3 id="6-1-柔性数组的特点："><a href="#6-1-柔性数组的特点：" class="headerlink" title="6.1 柔性数组的特点："></a>6.1 柔性数组的特点：</h3><ul><li>结构中的柔性数组成员前面必须至少一个其他成员。</li><li>sizeof 返回的这种结构大小不包含柔性数组的内存。</li><li>包含柔性数组成员的结构用malloc() 函数进行内存的动态分配，并且分配的内存应该大于结构的大小，以适应柔性数组的预期大小。</li></ul><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">st_type</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">0</span>];<span class="hljs-comment">//柔性数组成员</span><br>&#125;type_a;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(type_a));  <span class="hljs-comment">//4</span><br></code></pre></td></tr></table></figure><h3 id="6-2-柔性数组的使用："><a href="#6-2-柔性数组的使用：" class="headerlink" title="6.2 柔性数组的使用："></a>6.2 柔性数组的使用：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//代码1</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">st_type</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> a[];<span class="hljs-comment">//柔性数组成员</span><br>&#125;type_a;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span>* <span class="hljs-title">ps</span>=</span> (<span class="hljs-keyword">struct</span> S*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> S)+<span class="hljs-number">40</span>);<br>    <span class="hljs-keyword">if</span>(ps==<span class="hljs-literal">NULL</span>)<br>    &#123;<br><span class="hljs-comment">//...</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    ps-&gt;n = <span class="hljs-number">100</span>;<br>    <br>    <span class="hljs-comment">//使用</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>    &#123;<br>        ps-&gt;arr[i] = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,ps-&gt;arr[i]);<br>    &#125;<br>    <br>    <span class="hljs-comment">//扩容</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span>* <span class="hljs-title">ptr</span> =</span> (<span class="hljs-keyword">struct</span> S*)<span class="hljs-built_in">realloc</span>(ps,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> S)+<span class="hljs-number">80</span>);<br>    <span class="hljs-keyword">if</span>(ptr!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        ps = ptr;<br>        ptr = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-comment">//释放</span><br>    <span class="hljs-built_in">free</span>(ps);<br>    ps=<span class="hljs-literal">NULL</span>;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3-柔性数组的优势"><a href="#6-3-柔性数组的优势" class="headerlink" title="6.3 柔性数组的优势"></a>6.3 柔性数组的优势</h3><p>上述的<code>type_a</code>结构也可以设计为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//代码2</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">st_type</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> *p_a;<br>&#125;type_a;<br>type_a *p = (type_a*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(type_a));<br>p-&gt;i=<span class="hljs-number">100</span>;<br>p-p_a = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>((p-&gt;i)*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><br><span class="hljs-comment">//使用</span><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)<br>&#123;<br>    p-&gt;p_a[i] = i;<br>&#125;<br><br><span class="hljs-comment">//释放空间</span><br><span class="hljs-built_in">free</span>(p-p_a);<br>p-&gt;p_a = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">free</span>(p);<br>p = <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><p>上述<code>代码1</code>和<code>代码2</code>可以完成同样的功能，但是<code>方法1</code>的实现有两个好处：</p><p><strong>1.方便内存释放</strong></p><blockquote><p>如果我们的代码是在一个给别人用的函数中，你在里面做了二次内存分配，并把整个结构体返回给用户。用户调用free可以释放结构体，但是用户并不知道这个结构体内的成员也需要free，所以你不能指望用户来发现这个事。所以，如果我们把结构体的内存以及其成员要的内存一次性分配好了，并返回给用户一个结构体指针，用户做一次free就可以把所有的内存也给释放掉。</p></blockquote><p><strong>2.这样有利于访问速度</strong></p><blockquote><p>连续的内存有益于提高访问速度，地有益于减少内存碎片。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>动态内存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义类型：结构体、枚举和联合</title>
    <link href="/2024/02/27/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%EF%BC%9A%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E6%9E%9A%E4%B8%BE%E5%92%8C%E8%81%94%E5%90%88/"/>
    <url>/2024/02/27/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%EF%BC%9A%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E6%9E%9A%E4%B8%BE%E5%92%8C%E8%81%94%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="自定义类型：结构体、枚举、联合"><a href="#自定义类型：结构体、枚举、联合" class="headerlink" title="自定义类型：结构体、枚举、联合"></a>自定义类型：结构体、枚举、联合</h1><h2 id="重点内容"><a href="#重点内容" class="headerlink" title="重点内容"></a>重点内容</h2><p>​• 结构体</p><p>​· 结构体类型的声明</p><p>​· 结构体的引用</p><p>​· 结构体变量的定义和初始化</p><p>​· 结构体内存对齐</p><p>​· 结构体传参</p><p>​· 结构体实现位段（位段的填充&amp;可移植性）</p><p>​• 枚举</p><p>​· 枚举类型的定义</p><p>​· 枚举的优点</p><p>​ 枚举的使用</p><p>​• 联合</p><p>​· 联合类型的定义</p><p>​· 联合的特点</p><p>​· 联合大小的计算</p><hr><h1 id="1-结构体"><a href="#1-结构体" class="headerlink" title="1. 结构体"></a>1. 结构体</h1><h2 id="1-1-结构"><a href="#1-1-结构" class="headerlink" title="1.1 结构"></a>1.1 结构</h2><blockquote><p>结构是一些值的集合，这些值称为成员变量。结构的每个成员可以是不同类型的变量。</p></blockquote><h2 id="1-2-结构的声明"><a href="#1-2-结构的声明" class="headerlink" title="1.2 结构的声明"></a>1.2 结构的声明</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tag</span></span><br><span class="hljs-class">&#123;</span><br>member-<span class="hljs-built_in">list</span>;<br>&#125;variable-<span class="hljs-built_in">list</span>;<br></code></pre></td></tr></table></figure><p>例如用结构体描述一个学生：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">//学生的相关属性</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<span class="hljs-comment">//名字</span><br>    <span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">//学生的相关属性</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<span class="hljs-comment">//名字</span><br>    <span class="hljs-type">int</span> age;<br>&#125;s1,s2;  <span class="hljs-comment">//s1,s2 是利用上述结构体类型创建的全局变量</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span> <span class="hljs-title">s3</span>;</span><span class="hljs-comment">//s3是局部变量</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3-特殊的声明"><a href="#1-3-特殊的声明" class="headerlink" title="1.3 特殊的声明"></a>1.3 特殊的声明</h2><p>在声明结构的时候，可以不完全的声明。</p><p>比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//匿名结构体类型</span><br><span class="hljs-comment">//只能使用一次</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">char</span> b;<br>    <span class="hljs-type">float</span> c;<br>&#125;x;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> a;<br>    <span class="hljs-type">char</span> b;<br>    <span class="hljs-type">float</span> c;<br>&#125;a[<span class="hljs-number">20</span>],*p;<br></code></pre></td></tr></table></figure><p>上述两个结构体类型在声明时省略了结构体标签tag</p><p>注意：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">p = &amp;x; <span class="hljs-comment">//error</span><br><span class="hljs-comment">//编译器会把上面的两个声明当成完全不同的两个类型。所以非法</span><br></code></pre></td></tr></table></figure><h2 id="1-4-结构体的自引用"><a href="#1-4-结构体的自引用" class="headerlink" title="1.4 结构体的自引用"></a>1.4 结构体的自引用</h2><p>在结构中包含一个类型为该结构本身的成员……</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//代码1</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">int</span> date;         <br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> <span class="hljs-title">next</span>;</span><br>&#125;;<br><span class="hljs-comment">//代码错误 无法计算sizeof(struct Node)</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//代码2</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> date;<span class="hljs-comment">//数据域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">next</span>;</span><span class="hljs-comment">//指针域</span><br>&#125;;<br><span class="hljs-comment">// √</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//代码3</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> data;<br>    Node* next;<br>&#125;Node;<br><span class="hljs-comment">//代码错误</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//解决方案</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">next</span>;</span><br>&#125;Node;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> <span class="hljs-title">s1</span>;</span><br>Node s2;<br></code></pre></td></tr></table></figure><h2 id="1-5-结构体变量的定义和初始化"><a href="#1-5-结构体变量的定义和初始化" class="headerlink" title="1.5 结构体变量的定义和初始化"></a>1.5 结构体变量的定义和初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>&#125;p1;<span class="hljs-comment">//声明类型的同时定义变量p1</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point</span> <span class="hljs-title">p2</span>;</span><span class="hljs-comment">//定义结构体变量p2</span><br><br><span class="hljs-comment">//初始化：定义变量的同时赋初值</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point</span> <span class="hljs-title">p3</span> =</span> &#123;x,y&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>&#125;p4 = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span>//类型声明</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> name[<span class="hljs-number">15</span>];<span class="hljs-comment">//名字</span><br>    <span class="hljs-type">int</span> age;<span class="hljs-comment">//年龄</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span> <span class="hljs-title">s</span> =</span> &#123;<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">20</span>&#125;; <span class="hljs-comment">//初始化</span><br></code></pre></td></tr></table></figure><h2 id="1-6-结构体内存对齐"><a href="#1-6-结构体内存对齐" class="headerlink" title="1.6 结构体内存对齐"></a>1.6 结构体内存对齐</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//练习1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S1</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> c1; <span class="hljs-comment">//1</span><br>    <span class="hljs-type">int</span> i; <span class="hljs-comment">//4</span><br>    <span class="hljs-type">char</span> c2; <span class="hljs-comment">//1</span><br>&#125;;<br><span class="hljs-comment">//练习2</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S2</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> c1; <span class="hljs-comment">//1</span><br>    <span class="hljs-type">char</span> c2; <span class="hljs-comment">//1</span><br>    <span class="hljs-type">int</span> i; <span class="hljs-comment">//4</span><br>&#125;<br><span class="hljs-comment">//练习3</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S3</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">double</span> d;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-type">int</span> i;<br>&#125;;<br><span class="hljs-comment">//练习4</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S4</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> c1;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S3</span> <span class="hljs-title">s3</span>;</span><br>    <span class="hljs-type">double</span> d;<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> S1));<span class="hljs-comment">//12</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> S2));<span class="hljs-comment">//8</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> S3));<span class="hljs-comment">//16</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> S4));<span class="hljs-comment">//32</span><br>    <br>    <span class="hljs-comment">//验证 offsetof函数 - 计算结构体中数据在内存中的偏移量</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S1,c1));<span class="hljs-comment">//0 </span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S1,i));<span class="hljs-comment">//4</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S1,c2));<span class="hljs-comment">//8</span><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S2,c1));<span class="hljs-comment">//0 </span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S2,c2));<span class="hljs-comment">//1</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S2,i));<span class="hljs-comment">//4</span><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S4,c1));<span class="hljs-comment">//0 </span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S4,s3));<span class="hljs-comment">//8</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,offsetof(<span class="hljs-keyword">struct</span> S4,d));<span class="hljs-comment">//24</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结构体内存对齐规则：</strong></p><blockquote><p>1.第一个成员在与结构体变量的偏移量为0的地址处。</p><p>2.其他成员变量要对齐到某个数字（对齐数）的整数倍（偏移量）的地址处。</p><p><strong>对齐数</strong> &#x3D; 编译器默认的一个对齐数 与 该成员大小的较小值。</p><p>• <code>VS中默认值为8</code>    （其他编译器没有默认对齐数，默认为自身大小）</p><p>3.结构体大小为最大对齐数（每个成员变量都有一个对齐数）的整数倍。</p><p>4.如果嵌套了结构体的情况，嵌套的结构体对齐到自己的最大对齐数的整数倍处，结构体大小就是所有最大对齐数（含嵌套结构体的对齐数）的整数倍。</p></blockquote><p><strong>为什么存在内存对齐？</strong></p><ol><li><p><strong>平台原因(移植原因)：</strong></p><p>不是所有的硬件平台都能访问任意地址上的任意数据的；某些硬件平台只能在某些地址处取些特定类型的数据，否则抛出硬件异常。</p></li><li><p><strong>性能原因：</strong></p><p>数据结构(尤其是栈)应该尽可能地在自然边界上对齐。</p><p>原因在于，为了访问未对齐的内存，处理器需要作两次内存访问；而对齐的内存访问仅需要一次访问。（32位机器一次可以读取4个字节的内容）</p></li></ol><p>总体来说：</p><blockquote><p>结构体的内存对齐是拿<strong>空间</strong>来换取<strong>时间</strong>的做法</p></blockquote><br><p>那在设计结构体的时候，我们既要满足对齐，又要节省空间，如何做到：</p><blockquote><p>让占用空间小的成员尽量集中在一起</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//例</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S1</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> c1;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">char</span> c2;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S2</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> c1;<br>    <span class="hljs-type">char</span> c2;<br>    <span class="hljs-type">int</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-7-修改默认对齐数"><a href="#1-7-修改默认对齐数" class="headerlink" title="1.7 修改默认对齐数"></a>1.7 修改默认对齐数</h2><p><code>#pragma</code>这个预处理指令，可以改变默认对齐数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> pack(4) <span class="hljs-comment">//设置默认对齐数为4</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> i;<br>    <span class="hljs-type">double</span> d;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> pack() <span class="hljs-comment">//恢复默认对齐数</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> pack(1)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S1</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> c1;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">char</span> c2;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> pack()</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> S));  <span class="hljs-comment">//12</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> S1)); <span class="hljs-comment">//6</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-8-结构体传参"><a href="#1-8-结构体传参" class="headerlink" title="1.8 结构体传参"></a>1.8 结构体传参</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> data[<span class="hljs-number">1000</span>];<br>    <span class="hljs-type">int</span> num;<br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print1</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> S ss)</span><br>&#123;<br>    <span class="hljs-type">int</span> i= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,ss.data[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ss.num);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">print2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> S* ps)</span><br>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)<br>    &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,ps-&gt;data[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ps-&gt;num);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span> <span class="hljs-title">s</span> =</span> &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<span class="hljs-number">100</span>&#125;;<br>    print1(s); <span class="hljs-comment">//传值调用</span><br>    print2(&amp;s); <span class="hljs-comment">//传址调用</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上述print2函数的效果更好。</p><p>原因：</p><blockquote><p>函数传参时，参数需要压栈，会有时间和空间上的系统开销。</p><p>如果传递一个结构体对象的时候，结构体过大，参数压栈的系统开销比较大，所以会导致性能的下降。</p></blockquote><br><h1 id="2-位段"><a href="#2-位段" class="headerlink" title="2. 位段"></a>2. 位段</h1><p>结构体实现<code>位段</code>的能力</p><h2 id="2-1-什么是位段"><a href="#2-1-什么是位段" class="headerlink" title="2.1 什么是位段"></a>2.1 什么是位段</h2><p>位段的声明和结构是类似的，有两个不同：</p><blockquote><p>1.位段的成员必须是<code>int、unsigned int 或signed int</code>。</p><p>2.位段的成员后边有一个冒号和一个数字。</p><p>3.位段可以用来节省空间。</p></blockquote><p>比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> _a:<span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> _b:<span class="hljs-number">5</span>;<br>    <span class="hljs-type">int</span> _c:<span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> _d:<span class="hljs-number">30</span>; <span class="hljs-comment">//冒号后面是分配的比特位</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>A就是一个位段类型。</p><p>位段A的大小：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(Struct A)); <span class="hljs-comment">//8  - 64bit</span><br></code></pre></td></tr></table></figure><h2 id="2-2-位段的内存分配"><a href="#2-2-位段的内存分配" class="headerlink" title="2.2 位段的内存分配"></a>2.2 位段的内存分配</h2><p>​1.位段的成员可以是<code>int</code> <code>unsigned int</code> <code>signed int</code> 或者是<code>char</code>(属于整型家族)类型</p><p>​2.位段的空间上是按照需要以4个字节（<code>int</code>）或者1个字节（<code>char</code>）的方式来开辟的。</p><p>​3.位段涉及很多不确定的因素，位段是不跨平台的，注重可移植的程序应该避免使用位段。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">//1byte</span><br><span class="hljs-type">char</span> a : <span class="hljs-number">3</span>;<br>    <span class="hljs-type">char</span> b : <span class="hljs-number">4</span>;<br>    <span class="hljs-comment">//1byte</span><br>    <span class="hljs-type">char</span> c : <span class="hljs-number">5</span>;<br><span class="hljs-comment">//1byte</span><br>    <span class="hljs-type">char</span> d : <span class="hljs-number">4</span>;<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">S</span> <span class="hljs-title">s</span> =</span> &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> s));  <span class="hljs-comment">//3</span><br>    s.a = <span class="hljs-number">10</span>;<span class="hljs-comment">//1010 只存入了低三位010</span><br>    s.b = <span class="hljs-number">12</span>;<span class="hljs-comment">//1100 全部存入</span><br>    s.c = <span class="hljs-number">3</span>;<span class="hljs-comment">//011 存入00011</span><br>    s.d = <span class="hljs-number">4</span>;<span class="hljs-comment">//100 存入0100    </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%EF%BC%9A%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E6%9E%9A%E4%B8%BE%E5%92%8C%E8%81%94%E5%90%88/%E4%BD%8D%E6%AE%B5%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.png" alt="位段的内存分配"></p><h2 id="2-3-位段的跨平台问题"><a href="#2-3-位段的跨平台问题" class="headerlink" title="2.3 位段的跨平台问题"></a>2.3 位段的跨平台问题</h2><blockquote><p>1.int 位段被当成有符号数还是无符号数是不确定的。</p><p>2.位段中最大位的数目不能确定。（16位机器(int)最大16，32位机器最大32，写成27，在16位机器会出现问题。）</p><p>3.位段中的成员在内存中从左向右分配，还是从右向左分配标准尚未定义。</p><p>4.当一个结构体包含两个位段，第二个位段成员比较大，无法容纳第一个位段剩余的位时，是舍弃剩余的位还是利用，这是不去确定的。</p></blockquote><p><strong>总结：</strong></p><blockquote><p>跟结构相比，位段可以达到同样的效果，但是可以很好的节省空间，但是又跨平台的问题存在。</p></blockquote><h2 id="2-4-位段的应用"><a href="#2-4-位段的应用" class="headerlink" title="2.4 位段的应用"></a>2.4 位段的应用</h2><p><img src="/img/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%EF%BC%9A%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E6%9E%9A%E4%B8%BE%E5%92%8C%E8%81%94%E5%90%88/%E4%BD%8D%E6%AE%B5%E7%9A%84%E5%BA%94%E7%94%A8.png" alt="位段的应用"></p><br><h1 id="3-枚举"><a href="#3-枚举" class="headerlink" title="3.枚举"></a>3.枚举</h1><p>枚举顾名思义就是一一列举。</p><p>把可能的取值一一列举。</p><p>比如现实生活中：</p><blockquote><p>一周的星期一到星期日是有限的7天，可以一一列举。</p><p>性别有：男、女、保密，也可以一一列举。</p><p>月份有12个月、三原色……</p></blockquote><p>这里就可以使用枚举了。</p><h2 id="3-1枚举的类型的定义"><a href="#3-1枚举的类型的定义" class="headerlink" title="3.1枚举的类型的定义"></a>3.1枚举的类型的定义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Day</span>//星期</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">//枚举常量</span><br>Mon,<br>    Tues,<br>    Wed,<br>    Thur,<br>    Fri,<br>    Sat,<br>    Sun<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Sex</span></span><br><span class="hljs-class">&#123;</span><br>MALE,<br>    FAMALE,<br>    SELECT<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Color</span></span><br><span class="hljs-class">&#123;</span><br>RED,<br>    GREEN,<br>    BLUE<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Day</span> <span class="hljs-title">d</span> =</span> Fri;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上定义的<code>enum Day</code>，<code>enum Sex</code>，<code>enum Color</code>都是枚举类型。</p><p>{}中的内容是枚举类型的可能取值，也叫<code>枚举常量</code>。</p><p>这些可能取值都是有值的，默认从0开始，一次递增1，当然在定义的时候也可以赋初值。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Day</span>//星期</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">//枚举常量 - 不能修改</span><br>Mon=<span class="hljs-number">1</span>,<br>    Tues=<span class="hljs-number">2</span>,<br>    Wed,<br>    Thur,<br>    Fri,<br>    Sat,<br>    Sun<br>&#125;;<br><span class="hljs-type">int</span> main<br>&#123;<br>    <span class="hljs-comment">//默认也是从1开始</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,Mon);<span class="hljs-comment">//1</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,Tues);<span class="hljs-comment">//2</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,Wed);<span class="hljs-comment">//3</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,Thur);<br>    <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-2-枚举的优点"><a href="#3-2-枚举的优点" class="headerlink" title="3.2 枚举的优点"></a>3.2 枚举的优点</h2><blockquote><p>为什么使用枚举？</p></blockquote><p>我们可以使用<code>#define</code>定义常量，为什么非要使用枚举？</p><p>枚举的优点：</p><blockquote><p>1.增加代码的可读性和可维护性</p><p>2.和#define定义的标识符比较，枚举有类型检查，更加严谨</p><p>3.防止了命名污染（封装）</p><p>4.便于调试（#define会有个替换的过程）</p><p>5.使用方便，一次可以定义多个常量</p></blockquote><h2 id="3-3-枚举的使用"><a href="#3-3-枚举的使用" class="headerlink" title="3.3 枚举的使用"></a>3.3 枚举的使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Color</span></span><br><span class="hljs-class">&#123;</span><br>    RED=<span class="hljs-number">1</span>,<br>    GREEN=<span class="hljs-number">2</span>,<br>    BLUE=<span class="hljs-number">4</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Color</span> <span class="hljs-title">clr</span> =</span> GREEN;<br><span class="hljs-comment">//只能拿枚举常量给枚举变量赋值，才不会出现类型的差异。</span><br></code></pre></td></tr></table></figure><br><h1 id="4-联合（共用体）"><a href="#4-联合（共用体）" class="headerlink" title="4.联合（共用体）"></a>4.联合（共用体）</h1><h2 id="4-1-联合类型的定义"><a href="#4-1-联合类型的定义" class="headerlink" title="4.1 联合类型的定义"></a>4.1 联合类型的定义</h2><p>联合也是一种特殊的自定义类型</p><p>这种类型定义的变量也包含一系列的成员，特征是这些成员公用同一块空间（所以联合也叫共用体）。</p><p>比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Un</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> a;<br>    <span class="hljs-type">char</span> c;<br>&#125;;<br><span class="hljs-comment">//共用</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Un</span> <span class="hljs-title">u</span>;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(u)); <br>    <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-联合的特点"><a href="#4-2-联合的特点" class="headerlink" title="4.2 联合的特点"></a>4.2 联合的特点</h2><blockquote><p>联合的成员是共用同一块内存空间的，这样一个联合变量的大小，至少是最大成员的大小（因为联合至少得有能力保存最大的那个成员）</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Un</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> a;<br>    <span class="hljs-type">char</span> c;<br>&#125;;<br><span class="hljs-comment">//共用</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Un</span> <span class="hljs-title">u</span>;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(u)); <span class="hljs-comment">//4</span><br>    <span class="hljs-comment">//三个地址完全相同</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>,&amp;u);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>,&amp;(u.a));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>,&amp;(u.c));<br>    <br>    u.a = <span class="hljs-number">0x11223344</span>;<br>    u.c = <span class="hljs-number">0x00</span>;<br>    <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>• 判断当前机器是大端还是小端</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">check_sys</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Un</span></span><br><span class="hljs-class">    &#123;</span><br><span class="hljs-type">char</span> c;<br>        <span class="hljs-type">int</span> i;<br>    &#125;u;<br>    u.i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> u.c;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> ret = check_sys();<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;小端\n&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;大端\n&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-联合大小的计算"><a href="#4-3-联合大小的计算" class="headerlink" title="4.3 联合大小的计算"></a>4.3 联合大小的计算</h2><p>• 联合的大小至少是最大成员的大小</p><p>• 当最大成员大小不是最大对齐数的整数倍的时候，就要对齐到最大对齐数的整数倍。</p><p>比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Un1</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> arr[<span class="hljs-number">5</span>];<br>    <span class="hljs-type">int</span> i;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Un2</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">short</span> c[<span class="hljs-number">7</span>];<br>    <span class="hljs-type">int</span> i;<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">union</span> Un1));<span class="hljs-comment">//8</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">union</span> Un2));<span class="hljs-comment">//16</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>自定义类型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符/字符串函数和内存函数</title>
    <link href="/2024/02/26/%E5%AD%97%E7%AC%A6&amp;%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/"/>
    <url>/2024/02/26/%E5%AD%97%E7%AC%A6&amp;%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%E5%92%8C%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="字符-x2F-字符串函数和内存函数"><a href="#字符-x2F-字符串函数和内存函数" class="headerlink" title="字符&#x2F;字符串函数和内存函数"></a>字符&#x2F;字符串函数和内存函数</h1><blockquote><p>重点介绍处理字符和字符串的库函数的使用和注意事项</p></blockquote><p><strong>• 求字符串长度</strong></p><p>​· strlen</p><p><strong>• 长度不受限制的字符串函数</strong></p><p>​· strcpy</p><p>​· strcat</p><p>​· strcmp</p><p><strong>• 长度受限制的字符串函数</strong></p><p>​· strncpy</p><p>​· strncat</p><p>​· strncmp</p><p><strong>• 字符串查找</strong></p><p>​· strstr</p><p>​· strtok</p><p><strong>• 错误信息报告</strong></p><p>​· strerror</p><p><strong>• 字符操作</strong></p><p><strong>• 内存操作函数</strong></p><p>​· memcpy</p><p>​· memset</p><p>​· memcmp</p><p>​</p><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><blockquote><p>C语言中对字符和字符串的处理很是频繁，但是C语言本身是没有字符串类型的，字符串通常放在<code>常量字符串</code>中或者<code>字符数组</code>中。</p><p><code>字符串常量</code>适用于那些对它不做修改的字符串函数</p></blockquote><br><h2 id="1-函数介绍"><a href="#1-函数介绍" class="headerlink" title="1.函数介绍"></a>1.函数介绍</h2><h3 id="1-1-strlen-–-求字符串长度"><a href="#1-1-strlen-–-求字符串长度" class="headerlink" title="1.1 strlen – 求字符串长度"></a>1.1 strlen – 求字符串长度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> <span class="hljs-title function_">strlen</span> <span class="hljs-params">( <span class="hljs-type">const</span> <span class="hljs-type">char</span> * str)</span>;<br></code></pre></td></tr></table></figure><p>• 字符串已经<code>&#39;\0&#39;</code>作为结束标志，strlen函数返回的是在字符串中<code>&#39;\0&#39;</code>前面出现的字符个数(不包含<code>&#39;\0&#39;</code>)。</p><p>•  参数指向的字符串必须要以<code>&#39;\0&#39;</code>结束。</p><p>•  注意函数的返回值为<code>size_t</code>，是<code>无符号</code>类型。</p><p>注：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* str1 = <span class="hljs-string">&quot;abcdef&quot;</span>;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* str2 = <span class="hljs-string">&quot;bbb&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(str2)-<span class="hljs-built_in">strlen</span>(str1)&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str2&gt;str1\n&quot;</span>);  <span class="hljs-comment">//√  无符号整型相减，结果一直为正</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str1&gt;str2\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>• 模拟实现strlen</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-comment">//1.计数器方法</span><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">my_strlen1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str)</span>&#123;<br>    assert(str);<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(*str!=;\<span class="hljs-number">0</span>)&#123;<br>count++;<br>        str++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><span class="hljs-comment">//2.指针-指针</span><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">my_strlen2</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span><br>&#123;<br>  <span class="hljs-type">int</span> *start = str;<br>  <span class="hljs-keyword">while</span> (*str != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>  &#123;<br>    str++;<br>  &#125;<br>  <span class="hljs-keyword">return</span> (str - start); <br>&#125;<br><span class="hljs-comment">//3.递归的方式</span><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">my_strlen3</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span><br>&#123;<br>  <span class="hljs-keyword">if</span> (*str != <span class="hljs-number">0</span>)<br>  &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + my_strlen3(str + <span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> arr[] = <span class="hljs-string">&quot;abcdef&quot;</span>;<br><span class="hljs-type">size_t</span> n = my_strlen1(arr);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u\n&quot;</span>,n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="1-2-strcpy-–-字符串拷贝"><a href="#1-2-strcpy-–-字符串拷贝" class="headerlink" title="1.2 strcpy – 字符串拷贝"></a>1.2 strcpy – 字符串拷贝</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span>* <span class="hljs-title function_">strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span> * destination, <span class="hljs-type">const</span> <span class="hljs-type">char</span> * source)</span>;<br></code></pre></td></tr></table></figure><p>• 源字符串必须以<code>&#39;\0&#39;</code>结束。</p><p>• 会将源字符串中的<code>&#39;\0&#39;</code>拷贝到目标空间。</p><p>• 目标空间必须足够大，以确保能存放源字符串。</p><p>• 目标空间必须可变。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#inlcude <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span>* p = <span class="hljs-string">&quot;abcdef&quot;</span>; <span class="hljs-comment">//常量字符串</span><br>    <span class="hljs-type">char</span> arr[] = <span class="hljs-string">&quot;bit&quot;</span>;<br>    <span class="hljs-built_in">strcpy</span>(p,arr);  <span class="hljs-comment">//err 目标区域不可修改</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>• 模拟实现strcpy。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-comment">// strcpy()会把字符串中的&#x27;\0&#x27;也拷贝过去</span><br><span class="hljs-comment">// 返回值是char*</span><br><span class="hljs-comment">// 是为了实现链式访问</span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">my_strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src)</span><br>&#123;<br>  <span class="hljs-comment">// while (*src != &#x27;\0&#x27;)</span><br>  <span class="hljs-comment">// &#123;</span><br>  <span class="hljs-comment">//   *dest = *src;</span><br>  <span class="hljs-comment">//   dest++;</span><br>  <span class="hljs-comment">//   src++;</span><br>  <span class="hljs-comment">// &#125;</span><br><br>  <span class="hljs-type">char</span> *ret = dest;  <span class="hljs-comment">//保存首地址</span><br>  assert(src != <span class="hljs-literal">NULL</span>);<br>  assert(dest != <span class="hljs-literal">NULL</span>);<br>  <span class="hljs-keyword">while</span> (*dest++ = *src++)<br>  &#123;   <br>  &#125;<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> arr1[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;XXXXXXXXXXXXXXX&quot;</span>;<br>  <span class="hljs-type">char</span> arr2[] = <span class="hljs-string">&quot;hello bit&quot;</span>;<br>  <span class="hljs-type">char</span> *p = <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-comment">// my_strcpy(arr1, p);</span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, my_strcpy(arr1, arr2));<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="1-3-strcat-–-字符串追加"><a href="#1-3-strcat-–-字符串追加" class="headerlink" title="1.3 strcat – 字符串追加"></a>1.3 strcat – 字符串追加</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> * <span class="hljs-title function_">strcat</span><span class="hljs-params">(<span class="hljs-type">char</span> * destination , <span class="hljs-type">const</span> <span class="hljs-type">char</span> * source)</span>;<br></code></pre></td></tr></table></figure><p>• 源字符串必须以<code>&#39;\0&#39;</code>结束。</p><p>• 目标空间必须有足够大，能容纳下源字符串的内容。</p><p>• 目标空间必须可修改。</p><p>• 字符串自己给自己追加?&#x2F; No</p><p>• 模拟实现strcat</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">my_strcat</span><span class="hljs-params">(<span class="hljs-type">char</span>* dest,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* src)</span><br>&#123;<br>    <span class="hljs-type">char</span>* ret = dest;<br>    assert(dest &amp;&amp; src);<br>    <span class="hljs-comment">//1.找到目标空间的末尾&#x27;\0&#x27;</span><br>    <span class="hljs-keyword">while</span>(*dest!=<span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>        dest++<br>    &#125;<br>    <span class="hljs-comment">//2.字符串拷贝</span><br>    <span class="hljs-keyword">while</span>(*dest++ = *src++)&#123;<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> arr1[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;hello&quot;</span>;<br>    my_strcat(arr1,<span class="hljs-string">&quot;world&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,arr1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="1-4-strcmp-–-字符串比较"><a href="#1-4-strcmp-–-字符串比较" class="headerlink" title="1.4 strcmp – 字符串比较"></a>1.4 strcmp – 字符串比较</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">strcmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str1,<span class="hljs-type">const</span> <span class="hljs-type">char</span> * str2 )</span>;<br></code></pre></td></tr></table></figure><p>• 第一个字符串大于第二个字符串，则返回大于0的数字</p><p>• 第一个字符串等于第二个字符串，则返回0</p><p>• 第一个字符串小于第二个字符串，则返回小于0的数字</p><p>• 模拟实现strcmp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">my_strcmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str1,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str2)</span><br>&#123;<br>    assert(str1 &amp;&amp; str2);<br><span class="hljs-keyword">while</span>(*str1 == *str2)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(*str1 == <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//相等的情况</span><br>        &#125;<br>        str1++;<br>        str2++;<br>    &#125;<br><span class="hljs-keyword">return</span> (*str1-*str2);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> arr1[] = <span class="hljs-string">&quot;abcdef&quot;</span>;<br>    <span class="hljs-type">char</span> arr2[] = <span class="hljs-string">&quot;abcf&quot;</span>;<br>    <span class="hljs-type">int</span> ret = my_strcmp(arr1,arr2);<br>    <span class="hljs-keyword">if</span>(ret&lt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&lt;&quot;</span>);   <span class="hljs-comment">//√  一个字节一个字节比较ASCII码值</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ret==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;==&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="1-5-strncpy-–-长度受限制的字符串拷贝"><a href="#1-5-strncpy-–-长度受限制的字符串拷贝" class="headerlink" title="1.5 strncpy – 长度受限制的字符串拷贝"></a>1.5 strncpy – 长度受限制的字符串拷贝</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> * <span class="hljs-title function_">strncpy</span><span class="hljs-params">(<span class="hljs-type">char</span> * destination,<span class="hljs-type">const</span> <span class="hljs-type">char</span> * source, <span class="hljs-type">size_t</span> num )</span>;<br></code></pre></td></tr></table></figure><p>• 拷贝num个字符从源字符串到目标空间</p><p>• 如果源字符串的长度小于num，则拷贝完源字符串后，在目标的后边追加0，直到num个。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> arr1[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;abcdef&quot;</span>;<br>    <span class="hljs-type">char</span> arr2[] = <span class="hljs-string">&quot;hello bit&quot;</span>;<br>    <span class="hljs-built_in">strncpy</span>(arr1,arr2,<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,arr1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="1-6-strncat-–-长度受限制的字符串追加"><a href="#1-6-strncat-–-长度受限制的字符串追加" class="headerlink" title="1.6 strncat – 长度受限制的字符串追加"></a>1.6 strncat – 长度受限制的字符串追加</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> * <span class="hljs-title function_">strncat</span><span class="hljs-params">(<span class="hljs-type">char</span> * destination , <span class="hljs-type">const</span> <span class="hljs-type">char</span> * source, <span class="hljs-type">size_t</span> num)</span>;<br></code></pre></td></tr></table></figure><p>•</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//strncat example</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> str1[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">char</span> str2[<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">strcpy</span>(str1,<span class="hljs-string">&quot;To be &quot;</span>);<br>    <span class="hljs-built_in">strcpy</span>(str2,<span class="hljs-string">&quot;or not to be&quot;</span>);<br>    <span class="hljs-built_in">strncat</span>(str1, str2, <span class="hljs-number">6</span>);<br>    <span class="hljs-built_in">puts</span>(str1);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="1-7-strncmp-–-长度受限制的字符串比较"><a href="#1-7-strncmp-–-长度受限制的字符串比较" class="headerlink" title="1.7 strncmp – 长度受限制的字符串比较"></a>1.7 strncmp – 长度受限制的字符串比较</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">strncmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str1,<span class="hljs-type">const</span> <span class="hljs-type">char</span> * str2, <span class="hljs-type">size_t</span> num)</span>;<br></code></pre></td></tr></table></figure><p>• 比较到出现另一个字符不一样或者一个字符串结束或者num个字符串全部比较完。</p><p>• </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//strncmp example</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> str[][<span class="hljs-number">5</span>] = &#123;<span class="hljs-string">&quot;R2D2&quot;</span> , <span class="hljs-string">&quot;C3PO&quot;</span>, <span class="hljs-string">&quot;R2A6&quot;</span>&#125;;<br>    <span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Looking for R2 astromech droids...&quot;</span>);<br>    <span class="hljs-keyword">for</span>(n = <span class="hljs-number">0</span>;n&lt;<span class="hljs-number">3</span>;n++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strncmp</span>(str[n],<span class="hljs-string">&quot;R2xx&quot;</span>,<span class="hljs-number">2</span>) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;found %s\n&quot;</span>,str[n]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="1-8-strstr-–字符串查找子串"><a href="#1-8-strstr-–字符串查找子串" class="headerlink" title="1.8 strstr –字符串查找子串"></a>1.8 strstr –字符串查找子串</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> * <span class="hljs-title function_">strstr</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> * str1,<span class="hljs-type">const</span> <span class="hljs-type">char</span> * str2)</span>;<br></code></pre></td></tr></table></figure><p>• 返回值是找到子串(str2)在字符串(str1)中的第一个位置的指针或者空指针。</p><p>• 模拟实现strstr</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-type">char</span>* <span class="hljs-title function_">my_strstr</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str1,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str2)</span><br>&#123;<br>assert(str1 &amp;&amp; str2);<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* s1 = str1;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* s2 = str2;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* p = str1;  <span class="hljs-comment">// s1、s2和p是指向常量字符串的指针，它们的值不能被修改。</span><br>    <span class="hljs-keyword">while</span>(*p)<br>    &#123;<br>s1 = p;<br>        s2 = str2;<br>        <span class="hljs-keyword">while</span>(*s1!=<span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; *s2!=<span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; *s1 == *s2)<br>        &#123;<br>s1++;<br>            s2++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(*s2==<span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>            <span class="hljs-keyword">return</span> p;<br>        &#125;<br>        p++;      <br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> email[] = <span class="hljs-string">&quot;1327966204@qq.com&quot;</span>;<br>    <span class="hljs-type">char</span> substr[] = <span class="hljs-string">&quot;qq&quot;</span>;<br>    <span class="hljs-type">char</span> *ret = my_strstr(email,substr);<br>    <span class="hljs-keyword">if</span>(ret == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;子串不存在&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,ret);  <span class="hljs-comment">//qq.com</span><br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="1-9-strtok-–-切割字符串"><a href="#1-9-strtok-–-切割字符串" class="headerlink" title="1.9 strtok – 切割字符串"></a>1.9 strtok – 切割字符串</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> * <span class="hljs-title function_">strtok</span><span class="hljs-params">(<span class="hljs-type">char</span> * str,<span class="hljs-type">const</span> <span class="hljs-type">char</span> * sep)</span>;<br></code></pre></td></tr></table></figure><p>• sep参数是个字符串，定义了用作分隔符的字符集合</p><p>• 第一个参数指定一个字符串，它包含了0个或者多个由sep字符串中的一个或者多个分隔符分割的标记</p><p>• strtok函数找到str中的下一个标记，并将其用<code>&#39;\0&#39;</code>结尾，返回一个指向这个标记的指针。（注：strtok函数会改变被操作的字符串，所以在使用strtok函数切分的字符串一般都是临时拷贝的内容并且可修改。）</p><p>• strtok函数的第一个参数不为<code>NULL</code>，函数将找到str中第一个标记，strtok函数将保存它在字符串中的位置。</p><p>• strtok函数的第一个参数为<code>NULL</code>，函数将在<strong>同一个字符串</strong>中被保存的位置开始，查找下一个标记</p><p>• 如果字符串中不存在更多的标记，则返回<code>&#39;NULL&#39;</code>指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//strtok example</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* sep = <span class="hljs-string">&quot;@.&quot;</span>;<br>    <span class="hljs-type">char</span> email[] = <span class="hljs-string">&quot;1327966204@qq.com&quot;</span>;<br>    <span class="hljs-type">char</span> cp[<span class="hljs-number">60</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">strcpy</span>(cp,email);<br>    <br>    <span class="hljs-type">char</span> *ret = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span>(ret=strtok(cp,sep);ret!=<span class="hljs-literal">NULL</span>;ret=strtok(<span class="hljs-literal">NULL</span>,sep))<br>    &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,ret);<br>    &#125;<br>    <span class="hljs-comment">//char *ret = strtok(cp,sep);</span><br>    <span class="hljs-comment">//printf(&quot;%s\n&quot;,ret);</span><br>    <span class="hljs-comment">//char *ret = strtok(NULL,sep);</span><br>    <span class="hljs-comment">//printf(&quot;%s\n&quot;,ret);</span><br>    <span class="hljs-comment">//char *ret = strtok(NULL,sep);</span><br>    <span class="hljs-comment">//printf(&quot;%s\n&quot;,ret);</span><br>   <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="1-10-strerror-–-字符串错误信息报告"><a href="#1-10-strerror-–-字符串错误信息报告" class="headerlink" title="1.10 strerror – 字符串错误信息报告"></a>1.10 strerror – 字符串错误信息报告</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> * <span class="hljs-title function_">strerror</span><span class="hljs-params">(<span class="hljs-type">int</span> errnum)</span>;<br></code></pre></td></tr></table></figure><blockquote><p>返回错误码，所对应的错误信息</p><p>C语言的库函数，在执行失败的时候，都会设置错误码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//printf(&quot;%s\n&quot;,strerror(0));</span><br><span class="hljs-comment">//printf(&quot;%s\n&quot;,strerror(1));</span><br>    <span class="hljs-comment">//printf(&quot;%s\n&quot;,strerror(2));</span><br><span class="hljs-comment">//printf(&quot;%s\n&quot;,strerror(3));</span><br><span class="hljs-comment">//printf(&quot;%s\n&quot;,strerror(4));</span><br><span class="hljs-comment">//printf(&quot;%s\n&quot;,strerror(5));</span><br>    <br>    <span class="hljs-comment">//errno - C语言设置的一个全局的错误码存放的变量</span><br>    FILE* pf = fopen(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(pf == <span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,strerror(errno));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="1-11-字符分类函数-ctype-h"><a href="#1-11-字符分类函数-ctype-h" class="headerlink" title="1.11 字符分类函数(ctype.h)"></a>1.11 字符分类函数(ctype.h)</h3><table><thead><tr><th>函数</th><th>如果它的参数符合下列条件就返回真</th></tr></thead><tbody><tr><td>iscntrl</td><td>任何控制字符</td></tr><tr><td>isspace</td><td>空白字符：空格’ ‘,换页’\f’换行’\n’,回车’\r’,制表符’\t’或者垂直制表符’\v’</td></tr><tr><td>isdigit</td><td>十进制数组0~9</td></tr><tr><td>isxdigit</td><td>十六进制数字,包括所有十进制数字,小写字符a<del>f,大写字符A</del>F</td></tr><tr><td>islower</td><td>小写字母a~z</td></tr><tr><td>isupper</td><td>大写字母A~Z</td></tr><tr><td>isalpha</td><td>字母a<del>x或A</del>Z</td></tr><tr><td>isalnum</td><td>字母或数字, a<del>z,A</del>Z,0~9</td></tr><tr><td>ispunct</td><td>标点符号,任何不属于数字或者字母的图形字符(可打印)</td></tr><tr><td>isgraph</td><td>任何图形字符</td></tr><tr><td>isprint</td><td>任何可打印字符,包括图形字符和空白字符</td></tr></tbody></table><br><h3 id="1-12-字符转换函数-ctype-h"><a href="#1-12-字符转换函数-ctype-h" class="headerlink" title="1.12 字符转换函数(ctype.h)"></a>1.12 字符转换函数(ctype.h)</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">tolower</span> <span class="hljs-params">( <span class="hljs-type">int</span> c )</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">toupper</span> <span class="hljs-params">( <span class="hljs-type">int</span> c )</span>;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,<span class="hljs-built_in">tolower</span>(<span class="hljs-string">&#x27;W&#x27;</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,<span class="hljs-built_in">toupper</span>(<span class="hljs-string">&#x27;a&#x27;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="1-13-memcpy-内存拷贝函数"><a href="#1-13-memcpy-内存拷贝函数" class="headerlink" title="1.13 memcpy - 内存拷贝函数"></a>1.13 memcpy - 内存拷贝函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> * <span class="hljs-title function_">memcpy</span><span class="hljs-params">(<span class="hljs-type">void</span> * destination,<span class="hljs-type">const</span> <span class="hljs-type">void</span> * source,<span class="hljs-type">size_t</span> num)</span>;<br></code></pre></td></tr></table></figure><p>• 函数memcpy从source的位置开始向后复制num个字节的数据到destination的内存位置。</p><p>• 这个函数在遇到<code>&#39;\0&#39;</code>的时候并不会停下来。</p><p>• memcpy 负责拷贝两块独立空间中的数据 如果source和destination有任何的重叠，复制的结果都是未定义的。</p><p>• 模拟实现memcpy</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">void</span>* <span class="hljs-title function_">my_memcpy</span><span class="hljs-params">(<span class="hljs-type">void</span>* dest,<span class="hljs-type">const</span> <span class="hljs-type">void</span>* src,<span class="hljs-type">size_t</span> num)</span><br>&#123;<br>    assert(dest &amp;&amp; src);<br>    <span class="hljs-type">void</span>* ret = dest;<br>  <span class="hljs-keyword">while</span>(num--)<br>    &#123;<br>        *(<span class="hljs-type">char</span>*)dest = *(<span class="hljs-type">char</span>*)src;<br>        dest = (<span class="hljs-type">char</span>*)dest+<span class="hljs-number">1</span>;<br>        src = (<span class="hljs-type">char</span>*)src+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr1[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-type">int</span> arr2[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    my_memcpy(arr2,arr1,<span class="hljs-number">28</span>);<br>    <br>    <span class="hljs-type">float</span> arr3[<span class="hljs-number">5</span>]=&#123;<span class="hljs-number">1.0</span>, <span class="hljs-number">2.5</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">6.0</span>&#125;;<br>    <span class="hljs-type">float</span> arr4[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">0.0</span>&#125;;<br>    <span class="hljs-built_in">memcpy</span>(arr4,arr3,<span class="hljs-number">20</span>);<br>    <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="1-14-memmove-实现重叠内存空间之间的拷贝"><a href="#1-14-memmove-实现重叠内存空间之间的拷贝" class="headerlink" title="1.14 memmove - 实现重叠内存空间之间的拷贝"></a>1.14 memmove - 实现重叠内存空间之间的拷贝</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> * <span class="hljs-title function_">memmove</span><span class="hljs-params">(<span class="hljs-type">void</span> * destination,<span class="hljs-type">const</span> <span class="hljs-type">void</span> * source,<span class="hljs-type">size_t</span> num)</span>;<br></code></pre></td></tr></table></figure><p>• 和memcpy的差别就是memmove函数处理的源内存块和目标内存块是可以重叠的。</p><p>• 如果源空间和目标空间出现重叠，就得使用memmove函数处理。</p><p>• 模拟实现memmove</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">void</span>* <span class="hljs-title function_">my_memmove</span><span class="hljs-params">(<span class="hljs-type">void</span>* dest,<span class="hljs-type">const</span> <span class="hljs-type">void</span>* src,<span class="hljs-type">size_t</span> num)</span><br>&#123;<br>    assert(dest &amp;&amp; src);<br>    <span class="hljs-type">void</span>* ret = dest;<br>    <span class="hljs-keyword">if</span>( dest&lt; src)<br>    &#123;<br>    <span class="hljs-comment">//前 -&gt; 后</span><br>        <span class="hljs-keyword">while</span>(num--)<br>        &#123;<br>*(<span class="hljs-type">char</span>*)dest = *(<span class="hljs-type">char</span>*)src;<br>        dest = (<span class="hljs-type">char</span>*)dest+<span class="hljs-number">1</span>;<br>            src = (<span class="hljs-type">char</span>*)src+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br><span class="hljs-comment">//后 -&gt; 前</span><br>        <span class="hljs-keyword">while</span>(num--)<br>        &#123;<br>*((<span class="hljs-type">char</span>*)dest+num) = *((<span class="hljs-type">char</span>*)src+num);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr1[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-comment">//int arr2[10]=&#123;0&#125;;</span><br>    my_memmove(arr+<span class="hljs-number">2</span>,arr1,<span class="hljs-number">20</span>);<br>    <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h3 id="1-15-memcmp-内存空间比较函数"><a href="#1-15-memcmp-内存空间比较函数" class="headerlink" title="1.15 memcmp - 内存空间比较函数"></a>1.15 memcmp - 内存空间比较函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">memcmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> * ptr1,<span class="hljs-type">const</span> <span class="hljs-type">void</span> * ptr2,<span class="hljs-type">size_t</span> num)</span>;<br></code></pre></td></tr></table></figure><p>• 比较从ptr1和ptr2指针开始的num个字节</p><p>• ptr1开始的字节空间，出现第一个较小值，则返回值小于0</p><p>• ptr2开始的字节空间，出现第一个较小值，则返回值大于0</p><p>• 两个指针开始的num个字节空间的数据值大小完全相等，则返回值等于0</p><p>• </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//memcmp example</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr1[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-type">int</span> arr2[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">memcmp</span>(arr1,arr2,<span class="hljs-number">12</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ret);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-16-memset-内存空间设置函数"><a href="#1-16-memset-内存空间设置函数" class="headerlink" title="1.16 memset - 内存空间设置函数"></a>1.16 memset - 内存空间设置函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> * <span class="hljs-title function_">memset</span><span class="hljs-params">(<span class="hljs-type">void</span> * ptr,<span class="hljs-type">int</span> value,<span class="hljs-type">size_t</span> num)</span>;<br></code></pre></td></tr></table></figure><p>• memset函数可以设置，从指针ptr指向的内存空间开始，连续num个字节的值为value。</p><p>• </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//memset example</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> arr[] = <span class="hljs-string">&quot;hello bit&quot;</span>;<br>    <span class="hljs-comment">//memset(arr,&#x27;x&#x27;,5);</span><br>    <span class="hljs-built_in">memset</span>(arr+<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-number">3</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据在内存中的存储</title>
    <link href="/2024/02/15/%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/"/>
    <url>/2024/02/15/%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="数据在内存中的存储"><a href="#数据在内存中的存储" class="headerlink" title="数据在内存中的存储"></a>数据在内存中的存储</h1><br><h3 id="数据类型的介绍"><a href="#数据类型的介绍" class="headerlink" title="数据类型的介绍"></a>数据类型的介绍</h3><p>基本内置类型：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">char        //字符数据类型   1<br>short//短整型     2<br>int//整型     4<br>long//长整型 4/8<br>long long//更长的整型8<br>float//单精度浮点数   4<br>double//双精度浮点数   8<br></code></pre></td></tr></table></figure><p><strong>类型的意义</strong></p><p>1.使用这个类型开辟内存空间的大小（大小决定了适用范围）</p><p>2.如何看待内存空间的视角</p><br><h3 id="数据类型的基本归类"><a href="#数据类型的基本归类" class="headerlink" title="数据类型的基本归类"></a>数据类型的基本归类</h3><p><strong>整型家族</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">char//字符的本质是ASCII码值，是整型  <br><span class="hljs-code">signed char//char的标准是未定义的，有无符号取决于编译器</span><br><span class="hljs-code">unsigned char</span><br><span class="hljs-code">short</span><br><span class="hljs-code">signed short [int]</span><br><span class="hljs-code">unsigned short [int]</span><br><span class="hljs-code">int </span><br><span class="hljs-code">signed int</span><br><span class="hljs-code">unsigned int</span><br><span class="hljs-code">long </span><br><span class="hljs-code">signed long [int]</span><br><span class="hljs-code">unsigned long [int]</span><br><span class="hljs-code">long long</span><br><span class="hljs-code">signed long long [int]</span><br><span class="hljs-code">unsigned long long [int]</span><br></code></pre></td></tr></table></figure><p><strong>浮点数家族</strong></p><blockquote><p>只要是表示小数就可以使用浮点型</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">float</span><br><span class="hljs-built_in">double</span><br></code></pre></td></tr></table></figure><p><strong>构造类型：（自定义类型 - 可以自己创建出新的类型）</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&gt;数组类型<br>&gt;构造体类型 struct<br>&gt;枚举类型 enum<br>&gt;联合类型 union<br></code></pre></td></tr></table></figure><p><strong>指针类型</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">int <span class="hljs-emphasis">* pi;</span><br><span class="hljs-emphasis">char *</span> pc;<br>float <span class="hljs-emphasis">* pf;</span><br><span class="hljs-emphasis">void *</span> pv;<br></code></pre></td></tr></table></figure><p><strong>空类型</strong></p><blockquote><p>void表示空类型（无类型）<br>通常应用于函数的返回类型、函数的参数、指针类型</p></blockquote><br><h2 id="1-整型在内存中的存储"><a href="#1-整型在内存中的存储" class="headerlink" title="1.整型在内存中的存储"></a>1.整型在内存中的存储</h2><br><blockquote><p>整数表示的范围：limits.h中定义</p></blockquote><p><strong>整数在二进制的表示有三种形式：</strong></p><p>1.正的整数，原码、反码、补码相同</p><p>2.负的整数：</p><blockquote><p>原码：直接通过正数的形式写出的二进制序列就是原码，但序列最前方符号位为1</p><p>反码：原码的符号位不变，其他位按位取反</p><p>补码：反码+1就是补码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//数值有不同的表示形式</span><br><span class="hljs-comment">//2进制</span><br><span class="hljs-comment">//8进制</span><br><span class="hljs-comment">//10进制</span><br><span class="hljs-comment">//16进制</span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">20</span>;<br>    <span class="hljs-comment">//20</span><br>    <span class="hljs-comment">//00000000 00000000 00000000 00010100</span><br>    <span class="hljs-comment">//0X00 00 00 14</span><br>    <span class="hljs-comment">//00000000 00000000 00000000 00010100</span><br>    <span class="hljs-comment">//00000000 00000000 00000000 00010100</span><br>  <br>    <span class="hljs-type">int</span> b = <span class="hljs-number">-10</span>;<br>  <span class="hljs-comment">//-10</span><br>    <span class="hljs-comment">//10000000 00000000 00000000 00001010--原码</span><br>    <span class="hljs-comment">//0x80 00 00 0a</span><br>    <span class="hljs-comment">//11111111 11111111 11111111 11110101--反码</span><br>    <span class="hljs-comment">//0xff ff ff f5</span><br>    <span class="hljs-comment">//11111111 11111111 11111111 11110110--补码</span><br>    <span class="hljs-comment">//0xff ff ff f6</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在计算机系统中，数值一律用<strong>补码</strong>来表示和存储。原因在于，使用补码，可以将符号位和数值位统一处理；</p><p>同时，加法和减法也可以统一处理<strong>（CPU只有加法器）</strong>，此外，补码和原码相互转换，其运算过程是相同的，不需要额外的硬件电路。</p></blockquote><br><h2 id="2-大小端"><a href="#2-大小端" class="headerlink" title="2.大小端"></a>2.大小端</h2><p><strong>大端【字节序】存储：</strong>把一个数据的高位字节序的内容，存放在低地址处，把低位字节序的内容，放在高地址处，就是大端字节序存储。</p><p><strong>小端【字节序】存储：</strong>把一个数据的高位字节序的内容放在高地址处，把低位字节序的内容放在低地址处，就是小端字节序存储。</p><blockquote><p>左低右高，正序大端，逆序小端</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">0x11223344<br><br>大端存储       小端存储<br>11 22 33 44                                      44 33 22 11 <br>低地址 高地址    <br></code></pre></td></tr></table></figure><p>eg.设计一个程序来判断当前机器是大端还是小端</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">check_sys</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> *(<span class="hljs-type">char</span>*)&amp;a;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-comment">//0x00 00 00 01</span><br><span class="hljs-comment">//大端存储       小端存储</span><br><span class="hljs-comment">//00 00 00 01                                    01 00 00 00 </span><br><span class="hljs-comment">//低地址 高地址 </span><br>    <span class="hljs-type">char</span> *pa = (<span class="hljs-type">char</span>*)&amp;a;<br>    <span class="hljs-comment">//int ret = check_sys();</span><br>    <span class="hljs-keyword">if</span>(*pa==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;小端&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;大端&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><br><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>1.数据在内存中的存储&#x2F;<a href="https://sssssia.gitee.io/2024/02/04/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%95%B4%E5%9E%8B%E6%8F%90%E5%8D%87/">C语言中的整型提升</a> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> a=<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">signed</span> <span class="hljs-type">char</span> b = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> c = <span class="hljs-number">-1</span>;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d,b=%d,c=%d&quot;</span>,a,b.c);  <span class="hljs-comment">//-1  -1  255</span><br>    <span class="hljs-comment">//%d - 打印有符号整型（正负数）</span><br>    <span class="hljs-comment">//有符号char的取值 -128 ~ 127</span><br>    <span class="hljs-comment">//无符号char的取值 0 ~ 255</span><br>    <span class="hljs-comment">//有符号short的取值 -2^15 ~ 2^15-1</span><br>    <span class="hljs-comment">//无符号short的取值 0 ~ 2^16-1</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> a=<span class="hljs-number">-128</span>;<br>    <span class="hljs-comment">//10000000 00000000 00000000 10000000</span><br>    <span class="hljs-comment">//11111111 11111111 11111111 01111111</span><br>    <span class="hljs-comment">//11111111 11111111 11111111 10000000 - 截断</span><br>    <span class="hljs-comment">//10000000 - a</span><br>    <span class="hljs-comment">//11111111 11111111 11111111 10000000 - 提升</span><br>    <br>    <span class="hljs-comment">//%u - 打印无符号整数</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u\n&quot;</span>,a);  <span class="hljs-comment">//4294967168</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a);  <span class="hljs-comment">//-128</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//-128~127</span><br>    <span class="hljs-type">char</span> a=<span class="hljs-number">128</span>;<br>    <span class="hljs-comment">//00000000 00000000 00000000 10000000</span><br>    <span class="hljs-comment">//10000000 -a 截断</span><br>    <span class="hljs-comment">//11111111 11111111 11111111 10000000 - 提升</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u\n&quot;</span>,a);  <span class="hljs-comment">//4294967168 </span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a);  <span class="hljs-comment">//-128</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">-20</span>;<br>    <span class="hljs-comment">//10000000 00000000 00000000 00010100</span><br>    <span class="hljs-comment">//11111111 11111111 11111111 11101011</span><br>    <span class="hljs-comment">//11111111 11111111 11111111 11101100</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> j = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//00000000 00000000 00000000 00001010</span><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,i+j); <span class="hljs-comment">//-10</span><br>    <span class="hljs-comment">//11111111 11111111 11111111 11101100</span><br><span class="hljs-comment">//00000000 00000000 00000000 00001010</span><br><span class="hljs-comment">//11111111 11111111 11111111 11110110 - 补码</span><br>    <span class="hljs-comment">//10000000 00000000 00000000 00001001</span><br>    <span class="hljs-comment">//10000000 00000000 00000000 00001010 - -10</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-comment">//没有符号位 i的值永远大于等于0</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">9</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u\n&quot;</span>,i);<br>        <span class="hljs-comment">//死循环</span><br>        <span class="hljs-comment">//9 8 7 6 5 4 3 2 1 0 4294967295 4294967294...</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> a[<span class="hljs-number">1000</span>];<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++)&#123;<br>        a[i] = <span class="hljs-number">-1</span>-i;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-built_in">strlen</span>(a));<br>    <span class="hljs-comment">//有符号char的取值 -128 ~ 127</span><br>    <span class="hljs-comment">//-1 -2 -3 …… -128 127 126 …… 2 1 0 -1 -2 ……</span><br><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="7"><li></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//unsigned char取值范围0~255</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">255</span>;i++)&#123;   <span class="hljs-comment">//i&lt;=255的条件恒成立</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>);<br>        <span class="hljs-comment">//死循环</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="7"><li></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;abc&quot;</span>)-<span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;abcdef&quot;</span>)&gt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;\n&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&lt;\n&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//strlen返回值是size_t -&gt; unsigned int </span><br>    <span class="hljs-comment">//返回值相减一定大于等于0(无符号)</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><br><h2 id="3-浮点数在内存中的存储"><a href="#3-浮点数在内存中的存储" class="headerlink" title="3.浮点数在内存中的存储"></a>3.浮点数在内存中的存储</h2><p>常见的浮点数：</p><blockquote><p>3.14159</p><p>1E10</p><p>浮点数家族包括： float、double、long double类型。</p><p>浮点数表示的范围： float.h中定义</p></blockquote><h3 id="浮点数存储规则"><a href="#浮点数存储规则" class="headerlink" title="浮点数存储规则"></a>浮点数存储规则</h3><p>根据国际标准IEEE（电子和电气工程协会）754，任意一个<strong>二进制浮点数V</strong>可以表示成下面的形式：</p><blockquote><p>· (-1)^S * M * 2^E</p><p>·(-1)^S表示符号位，当S &#x3D; 0，V为正数；当S &#x3D; 1，V为负数。</p><p>·M表示有效数字，大于等于1，小于等于2.</p><p>·2^E表示指数位</p></blockquote><p>举例来说：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">eg.<br>V = 5.0f  -&gt; 二进制形式为：101.0  -&gt; 1.01 <span class="hljs-emphasis">* 2^2  -&gt; (-1)^0 *</span> 1.01 <span class="hljs-emphasis">* 2^2</span><br><span class="hljs-emphasis">S = 0;M = 1.01 ; E = 2</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">eg.</span><br><span class="hljs-emphasis">V = 9.5f  -&gt; 1001.1  -&gt; 1.0011 *</span> 2^3  -&gt; (-1)^0 <span class="hljs-emphasis">* 1.0011 *</span>2^3<br>S = 0;M = 1.0011; E = 3;<br><br>eg.<br>V = 9.6f  -&gt; ......<br></code></pre></td></tr></table></figure><p><strong>注意：小数或浮点数可能无法在内存中精确保存</strong></p><hr><h3 id="IEEE-754规定："><a href="#IEEE-754规定：" class="headerlink" title="IEEE 754规定："></a>IEEE 754规定：</h3><p>对于32位的浮点数，最高的1位是符号位S，接着的8位是指数E，剩下的23位为有效数字M。  –<strong>单精度浮点数存储模型</strong></p><p><img src="/img/%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/img1.png" alt="单精度浮点数存储模型"></p><p>对于64位的浮点数，最高的1位是符号位S，接着的11位是指数E，剩下的52位为有效数字M。  –<strong>双精度浮点数存储模型</strong></p><p><img src="/img/%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/img2.png" alt="双精度浮点数存储模型"></p><hr><p><strong>IEEE 754对有效数字M和指数E，还有一些特别的规定。</strong></p><p>前面说过，1≤M&lt;2，也就是说，M可以写成1.xxxxxx的形式，其中xxxxxx表示小数部分。</p><p>IEEE 754规定，在计算机内部保存M时，默认这个数的第一位总是1，因此可以被舍去，只保存后面xxxxxx部分。</p><p>比如保存1.01的时候，只保存01，等到读取的时候，再把第一位的1加上去。这样做的目的，是节省1位有效数字。</p><p>以32位浮点数为例，留给M只有23位，将第一位的1舍去以后，等于可以保存24位有效数字。</p><p>有时候尾数会不够填满尾数位。比如这里的, 尾数01001不够23位</p><p>此时, 需要在<strong>低位补零</strong>, 补齐23位.</p><p>之所以在低位补0, 是因为尾数中存储的本质上是二进制的小数部分, 所以如果想要在不影响原数值的情况下, 填满23位, 就需要在低位补零.</p><p>比如, 要把二进制数1.01在不改变原值的情况下填满八位内存, 写出来就应该是: 1.010 0000, 即需要在低位补0</p><p>同理, 本例中因为尾数部分存储的实际上是省略了整数部分 <strong>1.</strong> 之后, 剩余的小数部分, 所以这里补0时也需要在低位补0:</p><p>原尾数是: 01001(不到23位)</p><p>补零之后是: 0100 1000 0000 0000 000 (补至23位)</p><hr><p><strong>至于指数E，情况就比较复杂。</strong></p><p><strong>单精度类型中，指数位用于表示[-127, 128]范围内的指数；双精度类型中，指数位用于表示[-1023，1024]范围内的指数。</strong></p><p><strong>首先，E为一个无符号整数（unsigned int）</strong></p><p>这意味着，如果E为8位，它的取值范围为0～255；如果E为11位，它的取值范围为0～2047。</p><p>但是，我们知道，科学计数法中的E是可以出现负数的，所以IEEE 754规定，存入内存时E的真实值必须再加上一个中间数，对于8位的E，这个中间数是127；对于11位的E，这个中间数是1023。</p><p>比如，2＾10的E是10，所以保存成32位浮点数时，必须保存成10＋127＝137，即 10001001。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">V = 0.5f<br>  = 0.1<br>  = 1.0 <span class="hljs-emphasis">* 2^(-1)</span><br><span class="hljs-emphasis">  = (-1)^0 *</span> 1.0 <span class="hljs-emphasis">* 2^(-1)</span><br><span class="hljs-emphasis">  S=0M=1.0E=-1   (存储：E+127)</span><br><span class="hljs-emphasis">  </span><br></code></pre></td></tr></table></figure><hr><p>指数E从内存中取出可以再分成三种情况：</p><p><strong>E不全为0或不全为1</strong></p><blockquote><p>这时，浮点数就采用下面的规则表示，即指数E的计算值减去127（或1023），得到真实值，再将有效数字M前加上第一位的1。</p><p>比如：</p><p>0.5（1／2）的二进制形式为0.1，由于规定正数部分必须为1，即将小数点右移1位，则为1.0＊2＾（—1），其阶码为—1＋127＝126，表示为</p><p>01111110，而尾数1.0去掉整数部分为0，补齐0到23位00000000000000000000000，则其二进制表示形式为</p></blockquote><p>​<code>0 01111110 00000000000000000000000</code></p><p><strong>E全为0</strong></p><blockquote><p>这时，浮点数的指数E等于1—127（或者1—1023）即为真实值，</p><p>有效数字M不再加上第一位的1，而是还原为0．xxxxxx的小数。这样做是为了表示±0，以及接近于0的很小的数字。</p></blockquote><p><strong>E全为1</strong></p><blockquote><p>这时，如果有效数字M全为0，表示±无穷大（正负取决于符号位S）;</p></blockquote><hr><p>eg.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> n = <span class="hljs-number">9</span>;<br>    <span class="hljs-comment">//0 0000000 00000000 00000000 0001001</span><br>    <br>    <span class="hljs-type">float</span>* pFloat = (<span class="hljs-type">float</span>*)&amp;n;<br>    <span class="hljs-comment">//*pFloat认为n中存放的是浮点数</span><br>    <span class="hljs-comment">//E=-126 M=0.00000000000000000001001</span><br>    <span class="hljs-comment">//+ 0.00000000000000000001001 * 2^(-126)   ≈  0</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n的值为：%d\n&quot;</span>,n); <span class="hljs-comment">//9</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*pFloat的值为：%f\n&quot;</span>,*pFloat);  <span class="hljs-comment">//0.000000</span><br>    <br>    *pFloat = <span class="hljs-number">9.0</span>;<br>    <span class="hljs-comment">//1001.0</span><br>    <span class="hljs-comment">//1.001*2^3</span><br>    <span class="hljs-comment">//S=0 E=3 M=1.001</span><br>    <span class="hljs-comment">//0 10000010 00100000000000000000000  (整型值为1091567616）</span><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n的值为：%d\n&quot;</span>,n);  <span class="hljs-comment">//1091567616 </span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*pFloat的值为：%f\n&quot;</span>,*pFloat); <span class="hljs-comment">//9.000000</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>数据存储</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言中的整型提升</title>
    <link href="/2024/02/04/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%95%B4%E5%9E%8B%E6%8F%90%E5%8D%87/"/>
    <url>/2024/02/04/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%95%B4%E5%9E%8B%E6%8F%90%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://blog.csdn.net/m0_52089596/article/details/114397911">https://blog.csdn.net/m0_52089596/article/details/114397911</a></p></blockquote><hr><h2 id="整型提升"><a href="#整型提升" class="headerlink" title="整型提升:"></a>整型提升:</h2><blockquote><p>在表达式计算时，各种整形(char short int)首先要提升为int类型。表达式的整型运算要在CPU的相应运算器件内执行，CPU内的整型运算器的操作数的字节长度一般是int 类型的字节长度，即四个字节。如果int类型不足以表示的话，就需要提升为unsigned int类型。(相对应的大于等于int类型的数据，存在<strong>算术转换</strong>)</p></blockquote><h2 id="整型提升的规则"><a href="#整型提升的规则" class="headerlink" title="整型提升的规则:"></a>整型提升的规则:</h2><blockquote><p>整型提升分为有符号和无符号两种，<strong>有符号的：</strong>整型提升时是按照变量的补码被截断时的最高位是什么进行补位的，如果截断后最高位即最左面的一位数为 1 则在最高位前补 1 ，如果最高位是 0 则在前面补 0 ，补够32位即int类型即可。 <strong>无符号的：</strong> 直接在被截断的前面补 0 即可。</p></blockquote><h2 id="整型提升的意义"><a href="#整型提升的意义" class="headerlink" title="整型提升的意义:"></a>整型提升的意义:</h2><blockquote><p>表达式的整形运算都要在CPU的相应运算器件内执行，CPU内整型运算器(ALU)的操作数的字节长度一般就是int的字节长度，同时也是CPU的通用寄存器的长度。</p><p>因此，即使是两个char类型的相加，在CPU执行时实际上也要先转换为CPU内整形操作数的标准长度（int）。</p><p>通用CPU时难以直接实现两个8比特字节直接相加运算。所以表达式中各种长度可能小于int长度的整型值，都必须先转换成int或unsigned int，然后才能送入CPU去执行运算。</p></blockquote><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> a = <span class="hljs-number">3</span>;<br>    <span class="hljs-type">char</span> b = <span class="hljs-number">127</span>;<br>    <span class="hljs-type">char</span> c = a + b;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%95%B4%E5%9E%8B%E6%8F%90%E5%8D%87/img1.png" alt="运行结果"></p><p>3的补码为 : 00000000 00000000 00000000 00000011。</p><p>a的类型为char，只能存储一个字节即8个比特位，所以需要进行截断只保留最后的8个比特位，此时a中存储的数据为：00000011。</p><p>127的补码为 : 00000000 00000000 00000000 01111111。</p><p>同理，b的类型为char，此时b中存储的数据为: 01111111。</p><p>在执行 a+b 时，先对a 和 b进行整型提升(有符号)，提升时补最高位数字</p><p>提升后两者的补码为:</p><p>00000000 00000000 00000000 00000011</p><p>00000000 00000000 00000000 01111111</p><p>二者补码相加的结果为:</p><p>00000000 00000000 00000000 10000010</p><p>因为 c 的类型也为char，只能存放8个比特位，截断后 c 中存储的数据为: 10000010。</p><p>在打印时是以 %d 的形式即 int 类型，需要32位比特位，因此需要对 c 进行整型提升</p><p>因为c 的最高位是 1 所以在最高位前面补 1 即可，补够32位，提升后补码为：</p><p>11111111 11111111 11111111 10000010</p><p>将补码转化为原码的形式打印出来，转化后的原码为 ： 10000000 0 0000000 00000000 01111110 原码首位是 0 时为正数，为 1 时为负数，此原码对应的整数就为 -126</p><hr><p><strong>例:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> a= <span class="hljs-number">-129</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%95%B4%E5%9E%8B%E6%8F%90%E5%8D%87/img2.png" alt="运行结果"></p><p>整数 -129 的补码为： 11111111 11111111 11111111 01111111</p><p>被截断后为 01111111</p><p>打印%d的形式时在进行整型提升，截断后最高位为 0 ，所以在最高位前面补 0 提升后的补码为： </p><p>00000000 00000000 00000000 01111111</p><p>因为补码的最前面的一位数为0 ，所以是正数，正数的原码 反码 补码相同，即将补码转化的原码</p><p>为： 00000000 00000000 00000000 01111111 此原码对应的值就是 127</p><hr><p><strong>例:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> a = <span class="hljs-number">0xb6</span>;      <span class="hljs-comment">// 1011 0110</span><br>  <span class="hljs-type">short</span> b = <span class="hljs-number">0xb600</span>;   <span class="hljs-comment">// 1011 0110 0000 0000</span><br>  <span class="hljs-type">int</span> c = <span class="hljs-number">0xb6000000</span>; <span class="hljs-comment">// 1011 0110 0000 0000 0000 0000 0000 0000</span><br>  <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0xb6</span>)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>  <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0xb600</span>)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b&quot;</span>);<br>  <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0xb6000000</span>)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c&quot;</span>);<br>    <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E6%95%B4%E5%9E%8B%E6%8F%90%E5%8D%87/img3.png" alt="运行结果"></p><hr><p><strong>例</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> c = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%zu\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(c)); <span class="hljs-comment">//1</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%zu\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(+c)); <span class="hljs-comment">//4</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%zu\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(-c)); <span class="hljs-comment">//4</span><br>    <span class="hljs-comment">//加上+ -默认给char类型提升</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="算术转换"><a href="#算术转换" class="headerlink" title="算术转换"></a>算术转换</h2><p>如果某个操作符的各个操作数属于不同的类型，那么除非其中一个操作数转换位另一个操作数的类型，否则操作就无法进行。下面的层次体系称为<strong>寻常算术转换</strong>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">long double<br>double<br>float<br>unsigned long int <br>long int<br>unsigned int<br>int<br></code></pre></td></tr></table></figure><p>如果某个操作数的类型在上面这个列表中排名较低，那么首先要转换成类一个操作数的类型才能进行计算。</p><p>但是算术转换要合理，不然会有一些潜在的问题。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">float f = 3.14;<br>int num = f;  //隐式转换，会有精度丢失<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言实现扫雷</title>
    <link href="/2024/02/02/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/"/>
    <url>/2024/02/02/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="简易版扫雷"><a href="#简易版扫雷" class="headerlink" title="简易版扫雷"></a>简易版扫雷</h2><br><blockquote><p><em>效果如下:</em></p></blockquote><br><img src="https://gitee.com/sssssia/sssssia/raw/master/img/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/result1.png" alt="效果图"  /><hr><img src="https://gitee.com/sssssia/sssssia/raw/master/img/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%89%AB%E9%9B%B7/result2.png" alt="效果图"  /><hr><br><blockquote><p><em>代码部分</em>:</p></blockquote><br><p><strong>game.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ROW 9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COL 9</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ROWS ROW + 2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COLS COL + 2</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EASY_COUNT 10</span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> rows, <span class="hljs-type">int</span> cols, <span class="hljs-type">char</span> <span class="hljs-built_in">set</span>)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">DisplayBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">SetMine</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">FindMine</span><span class="hljs-params">(<span class="hljs-type">char</span> mine[ROWS][COLS], <span class="hljs-type">char</span> show[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><br><br></code></pre></td></tr></table></figure><hr><p><strong>game.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;game.h&quot;</span></span><br><br><br><span class="hljs-comment">// 初始化棋盘</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> rows, <span class="hljs-type">int</span> cols, <span class="hljs-type">char</span> <span class="hljs-built_in">set</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; rows; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; cols; j++)<br>        &#123;<br>            board[i][j] = <span class="hljs-built_in">set</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 打印棋盘</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DisplayBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;----------------------扫雷游戏-------------------------\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt;= col; j++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, j);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= row; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i);<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt;= col; j++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, board[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;----------------------扫雷游戏-------------------------\n&quot;</span>);<br>&#125;<br><br><br><br><span class="hljs-comment">// 随机埋雷</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">SetMine</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    <span class="hljs-type">int</span> count = EASY_COUNT;<br>    <span class="hljs-keyword">while</span> (count)<br>    &#123;<br>        <span class="hljs-type">int</span> x = rand() % row + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> y = rand() % col + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (board[x][y] == <span class="hljs-string">&#x27;0&#x27;</span>)<br>        &#123;<br>            board[x][y] = <span class="hljs-string">&#x27;1&#x27;</span>;<br>            count--;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-comment">//计算周边雷的个数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_mine_count</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROWS][COLS], <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> (board[x - <span class="hljs-number">1</span>][y] + board[x][y + <span class="hljs-number">1</span>] + board[x + <span class="hljs-number">1</span>][y] + board[x][y - <span class="hljs-number">1</span>] + board[x - <span class="hljs-number">1</span>][y + <span class="hljs-number">1</span>] + board[x - <span class="hljs-number">1</span>][y - <span class="hljs-number">1</span>] + board[x + <span class="hljs-number">1</span>][y + <span class="hljs-number">1</span>] + board[x + <span class="hljs-number">1</span>][y - <span class="hljs-number">1</span>] - (<span class="hljs-number">8</span> * <span class="hljs-string">&#x27;0&#x27;</span>));<br>&#125;<br><br><br><span class="hljs-comment">//递归展开无雷区域</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ExtendShow</span><span class="hljs-params">(<span class="hljs-type">char</span> mine[ROWS][COLS],<span class="hljs-type">char</span> show[ROWS][COLS],<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span> || y == <span class="hljs-number">0</span> || x == <span class="hljs-number">10</span> || y == <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> count = get_mine_count(mine, x, y);<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">-1</span>, j = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (show[x][y] != <span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>            show[x][y] = <span class="hljs-string">&#x27; &#x27;</span>; <br>            <br><br>            <span class="hljs-comment">//for (i = -1; i &lt;= 1; i++)&#123;</span><br>            <span class="hljs-comment">//    for (j = -1; j &lt;= 1; j++)&#123;</span><br>            <span class="hljs-comment">//        ExtendShow(mine, show, x+i, y+j);</span><br>            <span class="hljs-comment">//    &#125;</span><br>            <span class="hljs-comment">//&#125;</span><br><br><br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">-1</span>; i &lt;= <span class="hljs-number">1</span>; i++) &#123;<br>                ExtendShow(mine, show, x + i, y);<br>            &#125;<br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">-1</span>; j &lt;= <span class="hljs-number">1</span>; j++) &#123;<br>                ExtendShow(mine, show, x, y+j);<br>            &#125;<br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        show[x][y] = count + <span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br><br>&#125;<br><br><br><br><br><span class="hljs-comment">//判断输赢 - 计算发现的非雷区域的个数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">IsWin</span><span class="hljs-params">(<span class="hljs-type">char</span> show[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= row; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt;= col; j++) &#123;<br>            <span class="hljs-keyword">if</span> (show[i][j] != <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; show[i][j] != <span class="hljs-string">&#x27;?&#x27;</span>) &#123;<br>                count++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><br><span class="hljs-comment">//优化显示雷区(最后)</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">OptimizeMine</span><span class="hljs-params">(<span class="hljs-type">char</span> mine[ROWS][COLS],<span class="hljs-type">int</span> row,<span class="hljs-type">int</span> col)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= row; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt;= col; j++) &#123;<br>            <span class="hljs-keyword">if</span> (mine[i][j] == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>                mine[i][j] = <span class="hljs-string">&#x27; &#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                mine[i][j] = <span class="hljs-string">&#x27;*&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 排查雷</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">FindMine</span><span class="hljs-params">(<span class="hljs-type">char</span> mine[ROWS][COLS], <span class="hljs-type">char</span> show[ROWS][COLS], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> win = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 找到的非雷的个数</span><br><br>    <span class="hljs-keyword">while</span> (win &lt; row * col - EASY_COUNT)<br>    &#123;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入(-1 -1)标记雷 | &quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入要排查的坐标(x y):&gt;\n&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);<br><br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入要标记的坐标(x y):&gt;&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);<br>    <br>            <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="hljs-number">1</span> &amp;&amp; y &lt;= col) &#123;<br>                <span class="hljs-keyword">if</span> (show[x][y] != <span class="hljs-string">&#x27;*&#x27;</span> &amp;&amp; show[x][y]!=<span class="hljs-string">&#x27;?&#x27;</span>)<br>                &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;该坐标已被排查,无法进行标记\n&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    show[x][y] = <span class="hljs-string">&#x27;?&#x27;</span>;<br>                &#125;<br>            &#125;<br>            DisplayBoard(show, ROW, COL);<br>            <br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="hljs-number">1</span> &amp;&amp; y &lt;= col)&#123;<br>            <span class="hljs-keyword">if</span> (show[x][y] != <span class="hljs-string">&#x27;*&#x27;</span>&amp;&amp;show[x][y]!=<span class="hljs-string">&#x27;?&#x27;</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;该坐标已被排查,不能重复排查\n&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (mine[x][y] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>                &#123;<br>                    win = <span class="hljs-number">0</span>;<br>                    OptimizeMine(mine, ROW, COL);<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;游戏失败\n&quot;</span>);<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                    DisplayBoard(mine, ROW, COL);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-type">int</span> count = get_mine_count(mine, x, y);<br>                    <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;<br>                        ExtendShow(mine, show, x, y);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-comment">// 转换成数字字符</span><br>                        show[x][y] = count + <span class="hljs-string">&#x27;0&#x27;</span>;<br>          <br>                    &#125;<br>                    DisplayBoard(show, ROW, COL);<br><br>                &#125;<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;非法坐标,请重新输入\n&quot;</span>);<br><br>            <span class="hljs-comment">//清空缓存区</span><br>            <span class="hljs-keyword">while</span> (getchar() != <span class="hljs-string">&#x27;\n&#x27;</span>) &#123;<br>                getchar();<br>            &#125;<br>        &#125;<br>        win = IsWin(show, row, col);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (win == row * col - EASY_COUNT)<br>    &#123;<br>        win = <span class="hljs-number">0</span>;<br>        OptimizeMine(mine, ROW, COL);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;恭喜你,成功了\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        DisplayBoard(mine, ROW, COL);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p><strong>test.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;game.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">menu</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*****                    *****\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*****       1.play       *****\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*****       0.exit       *****\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*****                    *****\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;******************************\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">game</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> mine[ROWS][COLS] = &#123; <span class="hljs-number">0</span> &#125;; <span class="hljs-comment">// 存放雷的信息</span><br><span class="hljs-type">char</span> show[ROWS][COLS] = &#123; <span class="hljs-number">0</span> &#125;; <span class="hljs-comment">// 存放排查出的雷的信息</span><br><br><span class="hljs-comment">// mine 数组初始化全为&#x27;0&#x27;</span><br>InitBoard(mine, ROWS, COLS, <span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-comment">// show 数组初始化全为&#x27;*&#x27;</span><br>InitBoard(show, ROWS, COLS, <span class="hljs-string">&#x27;*&#x27;</span>);<br><br><span class="hljs-comment">// 设置雷</span><br>SetMine(mine, ROW, COL);<br>DisplayBoard(show, ROW, COL);<br><br><span class="hljs-comment">// 排查雷</span><br>FindMine(mine, show, ROW, COL);<br><span class="hljs-comment">//DisplayBoard(show, ROW, COL);</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">// 设置随机数的生成起点</span><br>srand((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)time(<span class="hljs-literal">NULL</span>));<br><span class="hljs-type">int</span> input = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">do</span><br>&#123;<br>menu();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请选择:&gt;&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;input);<br><span class="hljs-keyword">switch</span> (input)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>game();<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;退出游戏\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;非法输入\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">while</span> (input);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Welcome To 533dad&#39;s Blog</title>
    <link href="/2024/01/30/Welcome-To-533dad-s-Blog/"/>
    <url>/2024/01/30/Welcome-To-533dad-s-Blog/</url>
    
    <content type="html"><![CDATA[<p><strong>你好……</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Welcome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言实现三子棋</title>
    <link href="/2024/01/30/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E4%B8%89%E5%AD%90%E6%A3%8B/"/>
    <url>/2024/01/30/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E4%B8%89%E5%AD%90%E6%A3%8B/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="C语言实现简单人机三子棋"><a href="#C语言实现简单人机三子棋" class="headerlink" title="C语言实现简单人机三子棋"></a>C语言实现简单人机三子棋</h2><blockquote><p><em>效果如下</em>：</p></blockquote><p><img src="https://gitee.com/sssssia/sssssia/raw/master/img/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E4%B8%89%E5%AD%90%E6%A3%8B/img1.png" alt="效果图"></p><hr><blockquote><p><em>代码部分:</em></p></blockquote><p><strong>game.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ROW 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> COL 3</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-comment">// 初始化棋盘</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><br><span class="hljs-comment">// 打印棋盘</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DisplayBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><br><span class="hljs-comment">// 玩家下棋</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PlayerMove</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><br><span class="hljs-comment">// 电脑下棋</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ComputerMove</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><br><span class="hljs-comment">// 玩家赢 - &#x27;*&#x27;</span><br><span class="hljs-comment">// 电脑赢 - &#x27;#&#x27;</span><br><span class="hljs-comment">// 平局 - &#x27;Q&#x27;</span><br><span class="hljs-comment">// 继续 - &#x27; C&#x27;</span><br><span class="hljs-type">char</span> <span class="hljs-title function_">IsWin</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span>;<br><br></code></pre></td></tr></table></figure><hr><p><strong>game.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;game.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; col; j++)<br>        &#123;<br>            board[i][j] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// // 第一个版本</span><br><span class="hljs-comment">// void DisplayBoard(char board[ROW][COL], int row, int col)</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//   int i = 0;</span><br><br><span class="hljs-comment">//   for (i = 0; i &lt; row; i++)</span><br><span class="hljs-comment">//   &#123;</span><br><span class="hljs-comment">//     // 打印数据</span><br><span class="hljs-comment">//     printf(&quot; %c | %c | %c \n&quot;, board[i][0], board[i][1], board[i][2]);</span><br><br><span class="hljs-comment">//     // 打印分割信息</span><br><span class="hljs-comment">//     if (i &lt; row - 1)</span><br><span class="hljs-comment">//     &#123;</span><br><span class="hljs-comment">//       printf(&quot;---|---|---\n&quot;);</span><br><span class="hljs-comment">//     &#125;</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">DisplayBoard</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<br>    &#123;<br>        <span class="hljs-comment">// 打印数据</span><br>        <span class="hljs-comment">// printf(&quot; %c | %c | %c \n&quot;, board[i][0], board[i][1], board[i][2]);</span><br>        <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; col; j++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c &quot;</span>, board[i][j]);<br>            <span class="hljs-keyword">if</span> (j &lt; col - <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;|&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>        <span class="hljs-comment">// 打印分割信息</span><br>        <span class="hljs-keyword">if</span> (i &lt; row - <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; col; j++)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---&quot;</span>);<br>                <span class="hljs-keyword">if</span> (j &lt; col - <span class="hljs-number">1</span>)<br>                &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;|&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 玩家下棋</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PlayerMove</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;玩家下棋:&gt;\n&quot;</span>);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入坐标[x(1~3) y(1~3)]:&gt;\n&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);<br><br>        <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">1</span> &amp;&amp; x &lt;= row &amp;&amp; y &gt;= <span class="hljs-number">1</span> &amp;&amp; y &lt;= col)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (board[x - <span class="hljs-number">1</span>][y - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27; &#x27;</span>)<br>            &#123;<br>                board[x - <span class="hljs-number">1</span>][y - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;*&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;坐标被占用，不能下棋，请选择其他位置\n&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;坐标非法，请重新输入\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 电脑下棋</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ComputerMove</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    Sleep(<span class="hljs-number">500</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;电脑下棋:&gt;\n&quot;</span>);<br><br>    <span class="hljs-type">int</span> x, y;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        x = rand() % row; <span class="hljs-comment">// 0~2</span><br>        y = rand() % col; <span class="hljs-comment">// 0~2</span><br><br>        <span class="hljs-keyword">if</span> (board[x][y] == <span class="hljs-string">&#x27; &#x27;</span>)<br>        &#123;<br>            board[x][y] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">IsFull</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; col; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (board[i][j] == <span class="hljs-string">&#x27; &#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断输赢</span><br><span class="hljs-type">char</span> <span class="hljs-title function_">IsWin</span><span class="hljs-params">(<span class="hljs-type">char</span> board[ROW][COL], <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col)</span><br>&#123;<br>    <span class="hljs-comment">// 行</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; row; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (board[i][<span class="hljs-number">0</span>] == board[i][<span class="hljs-number">1</span>] &amp;&amp; board[i][<span class="hljs-number">1</span>] == board[i][<span class="hljs-number">2</span>] &amp;&amp; board[i][<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27; &#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> board[i][<span class="hljs-number">0</span>];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 列</span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; col; j++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][j] == board[<span class="hljs-number">1</span>][j] &amp;&amp; board[<span class="hljs-number">1</span>][j] == board[<span class="hljs-number">2</span>][j] &amp;&amp; board[<span class="hljs-number">0</span>][j] != <span class="hljs-string">&#x27; &#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> board[<span class="hljs-number">0</span>][j];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 对角线</span><br>    <span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == board[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] &amp;&amp; board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27; &#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> board[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] == board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &amp;&amp; board[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] == board[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] &amp;&amp; board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] != <span class="hljs-string">&#x27; &#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> board[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 平局</span><br>    <span class="hljs-keyword">if</span> (IsFull(board, ROW, COL))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Q&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 游戏继续</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;C&#x27;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p><strong>test.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;game.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">menu</span><span class="hljs-params">()</span><br>&#123;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;***********************************\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*****   1.play       0.exit   *****\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;***********************************\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">game</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> board[ROW][COL];<br>    <span class="hljs-comment">// 初始化棋盘</span><br>    InitBoard(board, ROW, COL);<br>    <span class="hljs-comment">// 打印棋盘</span><br>    DisplayBoard(board, ROW, COL);<br><br>    <span class="hljs-comment">// 下棋</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        PlayerMove(board, ROW, COL);<br>        DisplayBoard(board, ROW, COL);<br>        <span class="hljs-comment">// 判断输赢</span><br>        ret = IsWin(board, ROW, COL);<br>        <span class="hljs-keyword">if</span> (ret != <span class="hljs-string">&#x27;C&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        ComputerMove(board, ROW, COL);<br>        DisplayBoard(board, ROW, COL);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------\n&quot;</span>);<br>        <span class="hljs-comment">// 判断输赢</span><br>        ret = IsWin(board, ROW, COL);<br>        <span class="hljs-keyword">if</span> (ret != <span class="hljs-string">&#x27;C&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ret == <span class="hljs-string">&#x27;*&#x27;</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;玩家获胜\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == <span class="hljs-string">&#x27;#&#x27;</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;电脑获胜\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;平局\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    srand((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)time(<span class="hljs-literal">NULL</span>));<br>    <span class="hljs-type">int</span> input;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        menu();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请选择:&gt;&quot;</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;input);<br><br>        <span class="hljs-keyword">switch</span> (input)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;三子棋\n&quot;</span>);<br>            game();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;退出游戏\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;选择错误!\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (input);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个性化hexo主题</title>
    <link href="/2024/01/14/hexo-gitee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/01/14/hexo-gitee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p><a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97">Hexo Fluid 用户手册</a></p><h2 id="一些重要的配置"><a href="#一些重要的配置" class="headerlink" title="一些重要的配置"></a>一些重要的配置</h2><h3 id="初始化后的必要步骤"><a href="#初始化后的必要步骤" class="headerlink" title="初始化后的必要步骤"></a>初始化后的必要步骤</h3><p>首先，安装Fluid后，需要在根目录下新建一个<code>_config.fluid.yml</code>文件，并将<code>themes/fluid/_config.yml</code>中的所有内容复制过去。 然后，在<code>_config.yml</code>文件中指定主题和语言：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">theme: fluid  <span class="hljs-comment"># 指定主题</span><br>language: zh<span class="hljs-literal">-CN</span>  <span class="hljs-comment"># 指定语言</span><br></code></pre></td></tr></table></figure><p>最后，可以选择设置主题的自动更新，在根目录下输入以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm update <span class="hljs-literal">--save</span> hexo<span class="hljs-literal">-theme-fluid</span><br></code></pre></td></tr></table></figure><h3 id="创建关于页"><a href="#创建关于页" class="headerlink" title="创建关于页"></a>创建关于页</h3><p>关于页可以展示你的基本信息、兴趣、联系方式等，首次使用时需要先进行创建，在根目录输入以下命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">关于我</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span>  <span class="hljs-comment"># 必须存在且不能修改</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h3 id="覆盖配置"><a href="#覆盖配置" class="headerlink" title="覆盖配置"></a>覆盖配置</h3><p>当主题更新时可能导致原有配置丢失，因此在初始化后我们建立了<code>_config.fluid.yml</code>，<strong>之后所有的配置都只需要在根目录下的_config.fluid.yml文件中修改</strong>，而<code>themes/fluid/_config.yml</code>中的修改则无效、被覆盖。 注意：以下的所有配置也都是在<code>_config.fluid.yml</code>中修改！</p><h3 id="显示网站数据统计"><a href="#显示网站数据统计" class="headerlink" title="显示网站数据统计"></a>显示网站数据统计</h3><p>推荐采用leancloud实现显示网站的访客人数和总访问量，配置如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">footer:<br>  statistics:<br>    enable: false<br>    source: <span class="hljs-string">&quot;leancloud&quot;</span>  <span class="hljs-comment"># 在此处输入leancloud</span><br>    pv_format: <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span>  <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>    uv_format: <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br></code></pre></td></tr></table></figure><p>想要使用leancloud的功能，需要注册账号、新建应用并获取<code>App ID</code>和<code>App Key</code>，具体操作可以查看<a href="https://link.zhihu.com/?target=https://blog.csdn.net/lijing742180/article/details/87928554">这篇博文</a>。之后将获取的信息做如下配置：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">leancloud:<br>    app_id: 你获取的App ID<br>    app_key: 你获取的App Key<br></code></pre></td></tr></table></figure><p>这样就可以实现网站数据统计，需要注意的是在<strong>本地测试时可能会出现统计数据异常</strong>，这属于<strong>正常现象</strong>。</p><h3 id="开启博客评论功能"><a href="#开启博客评论功能" class="headerlink" title="开启博客评论功能"></a>开启博客评论功能</h3><p>推荐使用基于leancloud的Valine，首先需要做如下配置：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugin</span><br>comments:<br>    enable: true<br>    <span class="hljs-built_in">type</span>: valine  <span class="hljs-comment"># 在此处输入valine</span><br></code></pre></td></tr></table></figure><p>之后，在valine选项中做如下配置：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># Valine</span><br>valine:<br>  appId: 你获取的App ID<br>  appKey: 你获取的App Key<br></code></pre></td></tr></table></figure><p>访问<a href="https://link.zhihu.com/?target=https://valine.js.org/">Valine官网</a>，可以自定义评论系统的细节。</p><h2 id="撰写博客并发布"><a href="#撰写博客并发布" class="headerlink" title="撰写博客并发布"></a>撰写博客并发布</h2><h3 id="撰写博客"><a href="#撰写博客" class="headerlink" title="撰写博客"></a>撰写博客</h3><p>经过前面的六步，我们终于完成了一个博客系统的搭建，接下来我们就可以撰写自己的博文了。Hexo采用Markdown语法来编辑博文，这里推荐采用<a href="https://link.zhihu.com/?target=https://www.csdn.net/">csdn</a>的发布文章功能，先在csdn上写博文，之后导出为.md格式，就可以生成自己的博文。</p><h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>根据<a href="https://link.zhihu.com/?target=https://hexo.io/docs/writing.html">官方文档</a>，Hexo共有三种<code>layout</code>（排版形式）。在站点根目录下采用以下命令可以生成一个新的<code>layout</code>：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo new [<span class="hljs-type">layout</span>] &lt;title&gt;<br></code></pre></td></tr></table></figure><p><code>layout</code>的缺省值为<code>post</code>，会生成一篇新的博文；若选择<code>page</code>，则会生成一个新的页面（就像之前的关于页）；若选择<code>draft</code>，则会生成一个草稿，你可以在这里自主编辑并选择合适的时机publish到<code>source/_posts</code>文件夹中。基于csdn的协助，我们可以根据以下步骤快速的完成一篇博文并上传：</p><p>(1) 采用上述命令生成一篇新的<code>post</code>，执行后会在<code>source/_posts</code>中生成一个<code>&lt;title&gt;.md</code>的文件，这部分内容如下（又称为<code>Front-matter</code>）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&lt;title&gt;</span><br><span class="hljs-attr">date:</span> <span class="hljs-string">&lt;present</span> <span class="hljs-string">time&gt;</span><br><span class="hljs-attr">tags:</span> <span class="hljs-string">&lt;preset</span> <span class="hljs-string">tags&gt;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>(2) 将csdn中导出的md文字部分拷贝在上述内容的最后； (3) 执行以下命令，在本地（<code>http://localhost:4000</code>）查看效果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo c   <span class="hljs-comment"># 即hexo clean，清除缓存</span><br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>(4) 本地查看无误后，上传到网站：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo d<br></code></pre></td></tr></table></figure><h3 id="设置Front-matter"><a href="#设置Front-matter" class="headerlink" title="设置Front-matter"></a>设置Front-matter</h3><p>一篇博文的前页（即<code>Front-matter</code>）描述了这篇博文的一些基本信息，根据<a href="https://link.zhihu.com/?target=https://hexo.io/docs/front-matter">官方文档</a>，共有11类设置。这里主要介绍一下比较常用的设置： (1) categories（类别） 该属性用于对博文进行分类，例如是属于python还是属于java。类别有层次之分，在描述时需要从高到低，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Programming</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Python</span><br> <span class="hljs-string">```</span><br> <span class="hljs-string">本例说明该博文属于`Programming`类别下的`Python`子类。</span><br> <span class="hljs-string">(2)</span> <span class="hljs-string">tags（标签）</span><br> <span class="hljs-string">该属性用于描述博文的性质，例如该博文是经验分享还是刷题解析。标签是没有层次之分，描述时无顺序要求，例如：</span><br> <span class="hljs-string">```yaml</span><br> <span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">经验</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">后端</span><br></code></pre></td></tr></table></figure><p>本例说明该博文主要讲述了后端的经验分享。 (3) excerpt（摘要） 摘要会出现在博客首页，对整篇博文进行一个简要的介绍。根据<a href="https://link.zhihu.com/?target=https://www.dazhuanlan.com/sunningjiao/topics/1360401">资料</a>，设置摘要共有三种方法。官方推荐的方法是使用 <code>&lt;!-- more --&gt;</code> 进行手动截断，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">这是标题</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">这是摘要</span><br><span class="hljs-string">&lt;!--</span> <span class="hljs-string">more</span> <span class="hljs-string">--&gt;</span><br><span class="hljs-string">这是正文</span>   <span class="hljs-comment"># 注意：正文在显示时仍包括了上述摘要部分</span><br></code></pre></td></tr></table></figure><p>我个人推荐在前页中添加<code>excerpt</code>字段来手动输入摘要：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">这是标题</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">这是摘要</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>这样设置摘要自由度较高，无需担心摘要和正文内容不同。</p><h3 id="设置博文的url"><a href="#设置博文的url" class="headerlink" title="设置博文的url"></a>设置博文的url</h3><p>Hexo中一篇博文默认的url为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">:year/:month/:day/:title/</span>   <span class="hljs-comment"># 年/月/日/文章路径+博文名字</span><br></code></pre></td></tr></table></figure><p>这样十分容易造成中文url乱码，实际应用效果很差。<a href="https://link.zhihu.com/?target=https://blog.csdn.net/qq_41942221/article/details/116007091">这篇博文</a>给出了两种解决方案。这里我推荐将<code>source/_posts</code>下的各个md文件按照类似<code>blog00x</code>的顺序进行命名，然后在站点根目录下的<code>_config.yml</code>文件中做如下设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:title/</span><br></code></pre></td></tr></table></figure><p>对于懒人则可以使用Hash的方式，这样不需要进行统一编号，设置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:hash/</span><br></code></pre></td></tr></table></figure><p>值得注意的是这里参考了<a href="https://link.zhihu.com/?target=https://zkqiang.cn/">官方推送的个人博客网站</a>，没有使用年月日来设置url，而是采用<code>posts</code>来设置url，避免网址冗余。</p><h3 id="设置博文中的图片"><a href="#设置博文中的图片" class="headerlink" title="设置博文中的图片"></a>设置博文中的图片</h3><p>一篇博文的图片可以分为两类：第一类是在首页显示的博文封面图，第二类是在文章正文中显示的内容图。放置与引用这些图片有很多很多种方式，这里我推荐一下我个人的设置，并不代表它是最方便、最合适的，但是我个人用起来最为舒服，具体如下： 对于每一篇博文（即放在_posts中的每一个md文件），都在<code>source/img</code>目录下新建一个和博客同名的文件夹，将所有的图片（包括封面图和内容图）统一放在其中。对于封面图，在博文md文件的前页中添加如下信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/博客名/图片名</span>  <span class="hljs-comment"># 图片要加扩展名jpg等，下同</span><br></code></pre></td></tr></table></figure><p>对于内容图，直接在正文的相应位置做如下引用即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-type">![</span><span class="hljs-string">图片标题](/img/博客名/图片名)</span><br></code></pre></td></tr></table></figure><p>如果之后的网站具有一定规模，图片较多难以管理，可以采用图床进行云管理，详见<a href="https://link.zhihu.com/?target=https://www.cnblogs.com/huanhao/p/picup.html">这里</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo_Fluid</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux Study Diary</title>
    <link href="/2022/11/18/Linux-Study-Diary/"/>
    <url>/2022/11/18/Linux-Study-Diary/</url>
    
    <content type="html"><![CDATA[<p><strong>Linux发行版</strong> </p><ul><li>流行的 Linux 发行版包括<a href="https://en.wikipedia.org/wiki/Debian">Debian</a>、<a href="https://en.wikipedia.org/wiki/Fedora_Linux">Fedora Linux</a>和<a href="https://en.wikipedia.org/wiki/Ubuntu">Ubuntu</a>，它们本身有许多不同的发行版和修改版本，包括<a href="https://en.wikipedia.org/wiki/Lubuntu">Lubuntu</a>和<a href="https://en.wikipedia.org/wiki/Xubuntu">Xubuntu</a>。</li><li>商业发行版包括<a href="https://en.wikipedia.org/wiki/Red_Hat_Enterprise_Linux">Red Hat Enterprise Linux</a>和<a href="https://en.wikipedia.org/wiki/SUSE_Linux_Enterprise">SUSE Linux Enterprise</a>。</li><li>桌面 Linux 发行版包括一个<a href="https://en.wikipedia.org/wiki/Windowing_system">窗口系统</a>，例如<a href="https://en.wikipedia.org/wiki/X11">X11</a>或<a href="https://en.wikipedia.org/wiki/Wayland_(display_server_protocol)">Wayland</a>，以及一个<a href="https://en.wikipedia.org/wiki/Desktop_environment">桌面环境</a>，例如<a href="https://en.wikipedia.org/wiki/GNOME">GNOME</a>或<a href="https://en.wikipedia.org/wiki/KDE_Plasma_5">KDE Plasma</a>。用于<a href="https://en.wikipedia.org/wiki/Server_(computing)">服务器的发行版</a>可能会完全省略<a href="https://en.wikipedia.org/wiki/Computer_graphics">图形</a>，或包含<a href="https://en.wikipedia.org/wiki/Solution_stack">解决方案堆栈</a>，例如<a href="https://en.wikipedia.org/wiki/LAMP_(software_bundle)">LAMP</a>。因为 Linux 是可自由再分发的，所以任何人都可以出于任何目的创建一个分发版。</li></ul><hr><p><strong>Linux优点</strong>–<em>为什么绝大多数服务器部署在Linux上，而不是其他操作系统</em></p><p><em><strong>1.开源</strong></em> </p><p>Linux Server 相较 Windows Server 领先的首要原因是完全免费且可用作开源用途。通过开源方式，您可以轻松查看用于创建 Linux 内核的代码，也可以对代码进行修改和再创作。通过许多编程接口，您甚至可以开发自己的程序并将其添加到 Linux 操作系统中。还可以对 Linux Server 操作系统进行自定义，以满足使用要求，这是 Windows 无法实现的。</p><p><em><strong>2.稳定性</strong></em><br>Linux 系统一直以其稳定性而闻名，它们可以连续运行多年而不发生任何重大问题。事实上，很多 Linux 用户都从未在自己的环境中遇到过系统崩溃的情况。相对 Windows 而言，挂起和崩溃完全是一种常态。</p><p>尽管 Windows 也可以很好地执行多任务处理，但 Linux 可以在处理各种任务的同时，仍能提供坚如磐石的性能。</p><p>当将 Linux 与 Windows 进行对比时，对每项系统配置的更改都需要重启 Windows Server，而 Linux 更改大多数配置时都无需重启服务器即可生效，这也确保了 Linux 服务器最短的停机时间。</p><p><em><strong>3.安全</strong></em><br>Linux 由最初的多用户操作系统开发的 UNIX 操作系统发展而来，在安全方面显然比 Windows 更强。与 Windows 作为病毒和恶意软件攻击的首要目标不同，Linux Server 只有管理员或特定用户才有权访问 Linux 内核，而且 Linux 服务器（相较 Windows 而言）不会经常受到攻击，并且被发现的任何漏洞都会在第一时间由大批 Linux 开发人员修复。</p><p><em><strong>4.硬件</strong></em><br>当将 Linux Server 与 Windows Server 在硬件方面进行比较时，Windows 需要经常对硬件进行升级以满足各方面性能需求。而 Linux 对硬件的需求则很低，也不需要频繁对硬件进行升级更新，并且无论系统架构或处理器如何，都能表现得非常出色。</p><p><em><strong>5.灵活性</strong></em><br>Linux 是世界上最灵活的操作系统，没有之一，您可以根据需要自定义系统。使用 Linux，您可以随心所欲地安装 GUI 界面或仅使用「终端」管理服务器；使用 Linux，您可以选择各种工具和实用程序来管理所有与服务器相关的活动，如：添加用户、管理服务和网络，安装新应用程序以及监控性能等。</p><p>而 Shell 是 Linux 系统中最强大的组件，允许您运行各种程序并允许与内核进行交互。 总的来说，Linux 为您提供了对服务器的完全控制、掌控权利。</p><p><em><strong>6.总体拥有成本（TCO）和维护</strong></em><br>在总体拥有成本方面，由于 Linux 在使用上属于完全免费。即便您购买了针对企业或组织的 Linux 发行版，也会比 Windows 或其他许可软件花费更少。</p><p><em><strong>7.自由</strong></em><br>对 Linux 而言，您不会被商业供应商强加产品和服务，用户可以自由选择适合需求的产品。正是这种自由使得像 Amazon 和 Google 这样的大公司选择了基于 Linux 的服务器来提供服务。</p><p><em><strong>8.访问开源应用程序</strong></em><br>Linux 为开源应用程序开辟了一个新的世界，有数以千计的开源应用程序正在等待用户探索，您甚至可以使用特殊界面在 Linux 服务器上运行 Windows 应用程序。</p><p><em><strong>9.易于变更</strong></em><br>与 Windows Servers 不同，您可以轻松对 Linux Server 进行变更，并且无需重启服务器。对于 Windows Server 而言，要使用微软发布的新功能就得购买下一个版本。</p><p><em><strong>10.社区支持</strong></em><br>Linux 社区在全球都十分活跃和使用广泛，总有数千名志愿者在线活动以解决其他Linux 用户的问题，所以几乎在任何 Linux 论坛上发布的任何问题都会得到即时响应。而选择使用 Linux Enterprise 版本时，还会附有付费支持选项。</p>]]></content>
    
    
    <categories>
      
      <category>Study-Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/18/hello-world/"/>
    <url>/2022/11/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Welcome</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
